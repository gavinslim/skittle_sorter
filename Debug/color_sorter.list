
color_sorter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f40  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004110  08004110  00014110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004170  08004170  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004170  08004170  00014170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004178  08004178  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000070  080041f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  080041f0  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da39  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d4b  00000000  00000000  0002dad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e40  00000000  00000000  0002f828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d70  00000000  00000000  00030668  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015059  00000000  00000000  000313d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aa61  00000000  00000000  00046431  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080346  00000000  00000000  00050e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d11d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc8  00000000  00000000  000d1254  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080040f8 	.word	0x080040f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080040f8 	.word	0x080040f8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_Init+0x40>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <HAL_Init+0x40>)
 80005ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <HAL_Init+0x40>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <HAL_Init+0x40>)
 80005d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_Init+0x40>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_Init+0x40>)
 80005e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 f92f 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 f808 	bl	8000604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f4:	f002 ffd2 	bl	800359c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023c00 	.word	0x40023c00

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_InitTick+0x54>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_InitTick+0x58>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	fbb3 f3f1 	udiv	r3, r3, r1
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f939 	bl	800089a <HAL_SYSTICK_Config>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e00e      	b.n	8000650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d80a      	bhi.n	800064e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000638:	2200      	movs	r2, #0
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	f000 f90f 	bl	8000862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000644:	4a06      	ldr	r2, [pc, #24]	; (8000660 <HAL_InitTick+0x5c>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	e000      	b.n	8000650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000008 	.word	0x20000008
 800065c:	20000004 	.word	0x20000004
 8000660:	20000000 	.word	0x20000000

08000664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_IncTick+0x20>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_IncTick+0x24>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_IncTick+0x24>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000004 	.word	0x20000004
 8000688:	20000098 	.word	0x20000098

0800068c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return uwTick;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <HAL_GetTick+0x14>)
 8000692:	681b      	ldr	r3, [r3, #0]
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000098 	.word	0x20000098

080006a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006ac:	f7ff ffee 	bl	800068c <HAL_GetTick>
 80006b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006bc:	d005      	beq.n	80006ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_Delay+0x40>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006ca:	bf00      	nop
 80006cc:	f7ff ffde 	bl	800068c <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d8f7      	bhi.n	80006cc <HAL_Delay+0x28>
  {
  }
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000004 	.word	0x20000004

080006e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <__NVIC_SetPriorityGrouping+0x44>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071a:	4a04      	ldr	r2, [pc, #16]	; (800072c <__NVIC_SetPriorityGrouping+0x44>)
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	60d3      	str	r3, [r2, #12]
}
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <__NVIC_GetPriorityGrouping+0x18>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	f003 0307 	and.w	r3, r3, #7
}
 800073e:	4618      	mov	r0, r3
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	db0a      	blt.n	8000776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	490c      	ldr	r1, [pc, #48]	; (8000798 <__NVIC_SetPriority+0x4c>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	0112      	lsls	r2, r2, #4
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	440b      	add	r3, r1
 8000770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000774:	e00a      	b.n	800078c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4908      	ldr	r1, [pc, #32]	; (800079c <__NVIC_SetPriority+0x50>)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	3b04      	subs	r3, #4
 8000784:	0112      	lsls	r2, r2, #4
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	440b      	add	r3, r1
 800078a:	761a      	strb	r2, [r3, #24]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000e100 	.word	0xe000e100
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f1c3 0307 	rsb	r3, r3, #7
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	bf28      	it	cs
 80007be:	2304      	movcs	r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d902      	bls.n	80007d0 <NVIC_EncodePriority+0x30>
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3b03      	subs	r3, #3
 80007ce:	e000      	b.n	80007d2 <NVIC_EncodePriority+0x32>
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	f04f 32ff 	mov.w	r2, #4294967295
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43da      	mvns	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	401a      	ands	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43d9      	mvns	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	4313      	orrs	r3, r2
         );
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000818:	d301      	bcc.n	800081e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081a:	2301      	movs	r3, #1
 800081c:	e00f      	b.n	800083e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <SysTick_Config+0x40>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000826:	210f      	movs	r1, #15
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f7ff ff8e 	bl	800074c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <SysTick_Config+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <SysTick_Config+0x40>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff47 	bl	80006e8 <__NVIC_SetPriorityGrouping>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000862:	b580      	push	{r7, lr}
 8000864:	b086      	sub	sp, #24
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff5c 	bl	8000730 <__NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff8e 	bl	80007a0 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5d 	bl	800074c <__NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff ffb0 	bl	8000808 <SysTick_Config>
 80008a8:	4603      	mov	r3, r0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	; 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
 80008ce:	e14d      	b.n	8000b6c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008d0:	2201      	movs	r2, #1
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	697a      	ldr	r2, [r7, #20]
 80008e0:	4013      	ands	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	f040 813c 	bne.w	8000b66 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d00b      	beq.n	800090e <HAL_GPIO_Init+0x5a>
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d007      	beq.n	800090e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000902:	2b11      	cmp	r3, #17
 8000904:	d003      	beq.n	800090e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2b12      	cmp	r3, #18
 800090c:	d130      	bne.n	8000970 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	2203      	movs	r2, #3
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43db      	mvns	r3, r3
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	4013      	ands	r3, r2
 8000924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	68da      	ldr	r2, [r3, #12]
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	4313      	orrs	r3, r2
 8000936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000944:	2201      	movs	r2, #1
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	69ba      	ldr	r2, [r7, #24]
 8000950:	4013      	ands	r3, r2
 8000952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	091b      	lsrs	r3, r3, #4
 800095a:	f003 0201 	and.w	r2, r3, #1
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	4313      	orrs	r3, r2
 8000968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	2203      	movs	r2, #3
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	69ba      	ldr	r2, [r7, #24]
 8000984:	4013      	ands	r3, r2
 8000986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	689a      	ldr	r2, [r3, #8]
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	4313      	orrs	r3, r2
 8000998:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d003      	beq.n	80009b0 <HAL_GPIO_Init+0xfc>
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b12      	cmp	r3, #18
 80009ae:	d123      	bne.n	80009f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	08da      	lsrs	r2, r3, #3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3208      	adds	r2, #8
 80009b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	f003 0307 	and.w	r3, r3, #7
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	220f      	movs	r2, #15
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	69ba      	ldr	r2, [r7, #24]
 80009d0:	4013      	ands	r3, r2
 80009d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	691a      	ldr	r2, [r3, #16]
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	08da      	lsrs	r2, r3, #3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3208      	adds	r2, #8
 80009f2:	69b9      	ldr	r1, [r7, #24]
 80009f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	2203      	movs	r2, #3
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f003 0203 	and.w	r2, r3, #3
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	f000 8096 	beq.w	8000b66 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b50      	ldr	r3, [pc, #320]	; (8000b80 <HAL_GPIO_Init+0x2cc>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a4f      	ldr	r2, [pc, #316]	; (8000b80 <HAL_GPIO_Init+0x2cc>)
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b4d      	ldr	r3, [pc, #308]	; (8000b80 <HAL_GPIO_Init+0x2cc>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a56:	4a4b      	ldr	r2, [pc, #300]	; (8000b84 <HAL_GPIO_Init+0x2d0>)
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	089b      	lsrs	r3, r3, #2
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	f003 0303 	and.w	r3, r3, #3
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	220f      	movs	r2, #15
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	4013      	ands	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a42      	ldr	r2, [pc, #264]	; (8000b88 <HAL_GPIO_Init+0x2d4>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d00d      	beq.n	8000a9e <HAL_GPIO_Init+0x1ea>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a41      	ldr	r2, [pc, #260]	; (8000b8c <HAL_GPIO_Init+0x2d8>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d007      	beq.n	8000a9a <HAL_GPIO_Init+0x1e6>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a40      	ldr	r2, [pc, #256]	; (8000b90 <HAL_GPIO_Init+0x2dc>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d101      	bne.n	8000a96 <HAL_GPIO_Init+0x1e2>
 8000a92:	2302      	movs	r3, #2
 8000a94:	e004      	b.n	8000aa0 <HAL_GPIO_Init+0x1ec>
 8000a96:	2307      	movs	r3, #7
 8000a98:	e002      	b.n	8000aa0 <HAL_GPIO_Init+0x1ec>
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e000      	b.n	8000aa0 <HAL_GPIO_Init+0x1ec>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	69fa      	ldr	r2, [r7, #28]
 8000aa2:	f002 0203 	and.w	r2, r2, #3
 8000aa6:	0092      	lsls	r2, r2, #2
 8000aa8:	4093      	lsls	r3, r2
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ab0:	4934      	ldr	r1, [pc, #208]	; (8000b84 <HAL_GPIO_Init+0x2d0>)
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	089b      	lsrs	r3, r3, #2
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000abe:	4b35      	ldr	r3, [pc, #212]	; (8000b94 <HAL_GPIO_Init+0x2e0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	4013      	ands	r3, r2
 8000acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ae2:	4a2c      	ldr	r2, [pc, #176]	; (8000b94 <HAL_GPIO_Init+0x2e0>)
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <HAL_GPIO_Init+0x2e0>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	4013      	ands	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b0c:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <HAL_GPIO_Init+0x2e0>)
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <HAL_GPIO_Init+0x2e0>)
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_GPIO_Init+0x2e0>)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_GPIO_Init+0x2e0>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b60:	4a0c      	ldr	r2, [pc, #48]	; (8000b94 <HAL_GPIO_Init+0x2e0>)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	61fb      	str	r3, [r7, #28]
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	2b0f      	cmp	r3, #15
 8000b70:	f67f aeae 	bls.w	80008d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b74:	bf00      	nop
 8000b76:	3724      	adds	r7, #36	; 0x24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40013800 	.word	0x40013800
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	40020400 	.word	0x40020400
 8000b90:	40020800 	.word	0x40020800
 8000b94:	40013c00 	.word	0x40013c00

08000b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	807b      	strh	r3, [r7, #2]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ba8:	787b      	ldrb	r3, [r7, #1]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bae:	887a      	ldrh	r2, [r7, #2]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bb4:	e003      	b.n	8000bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bb6:	887b      	ldrh	r3, [r7, #2]
 8000bb8:	041a      	lsls	r2, r3, #16
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	619a      	str	r2, [r3, #24]
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d101      	bne.n	8000bde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e11f      	b.n	8000e1e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d106      	bne.n	8000bf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f002 fcfa 	bl	80035ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2224      	movs	r2, #36	; 0x24
 8000bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f022 0201 	bic.w	r2, r2, #1
 8000c0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c30:	f001 f920 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8000c34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	4a7b      	ldr	r2, [pc, #492]	; (8000e28 <HAL_I2C_Init+0x25c>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d807      	bhi.n	8000c50 <HAL_I2C_Init+0x84>
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4a7a      	ldr	r2, [pc, #488]	; (8000e2c <HAL_I2C_Init+0x260>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	bf94      	ite	ls
 8000c48:	2301      	movls	r3, #1
 8000c4a:	2300      	movhi	r3, #0
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	e006      	b.n	8000c5e <HAL_I2C_Init+0x92>
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4a77      	ldr	r2, [pc, #476]	; (8000e30 <HAL_I2C_Init+0x264>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	bf94      	ite	ls
 8000c58:	2301      	movls	r3, #1
 8000c5a:	2300      	movhi	r3, #0
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e0db      	b.n	8000e1e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4a72      	ldr	r2, [pc, #456]	; (8000e34 <HAL_I2C_Init+0x268>)
 8000c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6e:	0c9b      	lsrs	r3, r3, #18
 8000c70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68ba      	ldr	r2, [r7, #8]
 8000c82:	430a      	orrs	r2, r1
 8000c84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	6a1b      	ldr	r3, [r3, #32]
 8000c8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	4a64      	ldr	r2, [pc, #400]	; (8000e28 <HAL_I2C_Init+0x25c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d802      	bhi.n	8000ca0 <HAL_I2C_Init+0xd4>
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	e009      	b.n	8000cb4 <HAL_I2C_Init+0xe8>
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ca6:	fb02 f303 	mul.w	r3, r2, r3
 8000caa:	4a63      	ldr	r2, [pc, #396]	; (8000e38 <HAL_I2C_Init+0x26c>)
 8000cac:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb0:	099b      	lsrs	r3, r3, #6
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	6812      	ldr	r2, [r2, #0]
 8000cb8:	430b      	orrs	r3, r1
 8000cba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000cc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	4956      	ldr	r1, [pc, #344]	; (8000e28 <HAL_I2C_Init+0x25c>)
 8000cd0:	428b      	cmp	r3, r1
 8000cd2:	d80d      	bhi.n	8000cf0 <HAL_I2C_Init+0x124>
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	1e59      	subs	r1, r3, #1
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	bf38      	it	cc
 8000cec:	2304      	movcc	r3, #4
 8000cee:	e04f      	b.n	8000d90 <HAL_I2C_Init+0x1c4>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d111      	bne.n	8000d1c <HAL_I2C_Init+0x150>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	1e58      	subs	r0, r3, #1
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6859      	ldr	r1, [r3, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	440b      	add	r3, r1
 8000d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	bf0c      	ite	eq
 8000d14:	2301      	moveq	r3, #1
 8000d16:	2300      	movne	r3, #0
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	e012      	b.n	8000d42 <HAL_I2C_Init+0x176>
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	1e58      	subs	r0, r3, #1
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6859      	ldr	r1, [r3, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	440b      	add	r3, r1
 8000d2a:	0099      	lsls	r1, r3, #2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d32:	3301      	adds	r3, #1
 8000d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	bf0c      	ite	eq
 8000d3c:	2301      	moveq	r3, #1
 8000d3e:	2300      	movne	r3, #0
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_I2C_Init+0x17e>
 8000d46:	2301      	movs	r3, #1
 8000d48:	e022      	b.n	8000d90 <HAL_I2C_Init+0x1c4>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10e      	bne.n	8000d70 <HAL_I2C_Init+0x1a4>
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	1e58      	subs	r0, r3, #1
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6859      	ldr	r1, [r3, #4]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	440b      	add	r3, r1
 8000d60:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d64:	3301      	adds	r3, #1
 8000d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d6e:	e00f      	b.n	8000d90 <HAL_I2C_Init+0x1c4>
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	1e58      	subs	r0, r3, #1
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6859      	ldr	r1, [r3, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	0099      	lsls	r1, r3, #2
 8000d80:	440b      	add	r3, r1
 8000d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d86:	3301      	adds	r3, #1
 8000d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	6809      	ldr	r1, [r1, #0]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69da      	ldr	r2, [r3, #28]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	431a      	orrs	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	430a      	orrs	r2, r1
 8000db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000dbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	6911      	ldr	r1, [r2, #16]
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	68d2      	ldr	r2, [r2, #12]
 8000dca:	4311      	orrs	r1, r2
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	6812      	ldr	r2, [r2, #0]
 8000dd0:	430b      	orrs	r3, r1
 8000dd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	695a      	ldr	r2, [r3, #20]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	431a      	orrs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	430a      	orrs	r2, r1
 8000dee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 0201 	orr.w	r2, r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2220      	movs	r2, #32
 8000e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	000186a0 	.word	0x000186a0
 8000e2c:	001e847f 	.word	0x001e847f
 8000e30:	003d08ff 	.word	0x003d08ff
 8000e34:	431bde83 	.word	0x431bde83
 8000e38:	10624dd3 	.word	0x10624dd3

08000e3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af02      	add	r7, sp, #8
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	461a      	mov	r2, r3
 8000e48:	460b      	mov	r3, r1
 8000e4a:	817b      	strh	r3, [r7, #10]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000e50:	f7ff fc1c 	bl	800068c <HAL_GetTick>
 8000e54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b20      	cmp	r3, #32
 8000e60:	f040 80e0 	bne.w	8001024 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2319      	movs	r3, #25
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4970      	ldr	r1, [pc, #448]	; (8001030 <HAL_I2C_Master_Transmit+0x1f4>)
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f000 fc58 	bl	8001724 <I2C_WaitOnFlagUntilTimeout>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	e0d3      	b.n	8001026 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d101      	bne.n	8000e8c <HAL_I2C_Master_Transmit+0x50>
 8000e88:	2302      	movs	r3, #2
 8000e8a:	e0cc      	b.n	8001026 <HAL_I2C_Master_Transmit+0x1ea>
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d007      	beq.n	8000eb2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f042 0201 	orr.w	r2, r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ec0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2221      	movs	r2, #33	; 0x21
 8000ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2210      	movs	r2, #16
 8000ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	893a      	ldrh	r2, [r7, #8]
 8000ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4a50      	ldr	r2, [pc, #320]	; (8001034 <HAL_I2C_Master_Transmit+0x1f8>)
 8000ef2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000ef4:	8979      	ldrh	r1, [r7, #10]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	6a3a      	ldr	r2, [r7, #32]
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f000 fac2 	bl	8001484 <I2C_MasterRequestWrite>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e08d      	b.n	8001026 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000f20:	e066      	b.n	8000ff0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	6a39      	ldr	r1, [r7, #32]
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f000 fcd2 	bl	80018d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00d      	beq.n	8000f4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	d107      	bne.n	8000f4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e06b      	b.n	8001026 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f52:	781a      	ldrb	r2, [r3, #0]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5e:	1c5a      	adds	r2, r3, #1
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f76:	3b01      	subs	r3, #1
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	2b04      	cmp	r3, #4
 8000f8a:	d11b      	bne.n	8000fc4 <HAL_I2C_Master_Transmit+0x188>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d017      	beq.n	8000fc4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f98:	781a      	ldrb	r2, [r3, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	6a39      	ldr	r1, [r7, #32]
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f000 fcc2 	bl	8001952 <I2C_WaitOnBTFFlagUntilTimeout>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00d      	beq.n	8000ff0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	d107      	bne.n	8000fec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e01a      	b.n	8001026 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d194      	bne.n	8000f22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2220      	movs	r2, #32
 800100c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001020:	2300      	movs	r3, #0
 8001022:	e000      	b.n	8001026 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001024:	2302      	movs	r3, #2
  }
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	00100002 	.word	0x00100002
 8001034:	ffff0000 	.word	0xffff0000

08001038 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	; 0x30
 800103c:	af02      	add	r7, sp, #8
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	461a      	mov	r2, r3
 8001044:	460b      	mov	r3, r1
 8001046:	817b      	strh	r3, [r7, #10]
 8001048:	4613      	mov	r3, r2
 800104a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800104c:	f7ff fb1e 	bl	800068c <HAL_GetTick>
 8001050:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b20      	cmp	r3, #32
 800105c:	f040 820b 	bne.w	8001476 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2319      	movs	r3, #25
 8001066:	2201      	movs	r2, #1
 8001068:	497c      	ldr	r1, [pc, #496]	; (800125c <HAL_I2C_Master_Receive+0x224>)
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f000 fb5a 	bl	8001724 <I2C_WaitOnFlagUntilTimeout>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001076:	2302      	movs	r3, #2
 8001078:	e1fe      	b.n	8001478 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001080:	2b01      	cmp	r3, #1
 8001082:	d101      	bne.n	8001088 <HAL_I2C_Master_Receive+0x50>
 8001084:	2302      	movs	r3, #2
 8001086:	e1f7      	b.n	8001478 <HAL_I2C_Master_Receive+0x440>
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b01      	cmp	r3, #1
 800109c:	d007      	beq.n	80010ae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f042 0201 	orr.w	r2, r2, #1
 80010ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2222      	movs	r2, #34	; 0x22
 80010c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2210      	movs	r2, #16
 80010ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2200      	movs	r2, #0
 80010d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	893a      	ldrh	r2, [r7, #8]
 80010de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4a5c      	ldr	r2, [pc, #368]	; (8001260 <HAL_I2C_Master_Receive+0x228>)
 80010ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80010f0:	8979      	ldrh	r1, [r7, #10]
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f000 fa46 	bl	8001588 <I2C_MasterRequestRead>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e1b8      	b.n	8001478 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800110a:	2b00      	cmp	r3, #0
 800110c:	d113      	bne.n	8001136 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	623b      	str	r3, [r7, #32]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	623b      	str	r3, [r7, #32]
 8001122:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e18c      	b.n	8001450 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800113a:	2b01      	cmp	r3, #1
 800113c:	d11b      	bne.n	8001176 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800114c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	61fb      	str	r3, [r7, #28]
 8001162:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e16c      	b.n	8001450 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800117a:	2b02      	cmp	r3, #2
 800117c:	d11b      	bne.n	80011b6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800118c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800119c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	61bb      	str	r3, [r7, #24]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	e14c      	b.n	8001450 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80011dc:	e138      	b.n	8001450 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	f200 80f1 	bhi.w	80013ca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d123      	bne.n	8001238 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f000 fbed 	bl	80019d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e139      	b.n	8001478 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001220:	3b01      	subs	r3, #1
 8001222:	b29a      	uxth	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800122c:	b29b      	uxth	r3, r3
 800122e:	3b01      	subs	r3, #1
 8001230:	b29a      	uxth	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001236:	e10b      	b.n	8001450 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800123c:	2b02      	cmp	r3, #2
 800123e:	d14e      	bne.n	80012de <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001246:	2200      	movs	r2, #0
 8001248:	4906      	ldr	r1, [pc, #24]	; (8001264 <HAL_I2C_Master_Receive+0x22c>)
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f000 fa6a 	bl	8001724 <I2C_WaitOnFlagUntilTimeout>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d008      	beq.n	8001268 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e10e      	b.n	8001478 <HAL_I2C_Master_Receive+0x440>
 800125a:	bf00      	nop
 800125c:	00100002 	.word	0x00100002
 8001260:	ffff0000 	.word	0xffff0000
 8001264:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001276:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	691a      	ldr	r2, [r3, #16]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001294:	3b01      	subs	r3, #1
 8001296:	b29a      	uxth	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c6:	3b01      	subs	r3, #1
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	3b01      	subs	r3, #1
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80012dc:	e0b8      	b.n	8001450 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e4:	2200      	movs	r2, #0
 80012e6:	4966      	ldr	r1, [pc, #408]	; (8001480 <HAL_I2C_Master_Receive+0x448>)
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f000 fa1b 	bl	8001724 <I2C_WaitOnFlagUntilTimeout>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e0bf      	b.n	8001478 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001306:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	691a      	ldr	r2, [r3, #16]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001324:	3b01      	subs	r3, #1
 8001326:	b29a      	uxth	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001330:	b29b      	uxth	r3, r3
 8001332:	3b01      	subs	r3, #1
 8001334:	b29a      	uxth	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001340:	2200      	movs	r2, #0
 8001342:	494f      	ldr	r1, [pc, #316]	; (8001480 <HAL_I2C_Master_Receive+0x448>)
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f000 f9ed 	bl	8001724 <I2C_WaitOnFlagUntilTimeout>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e091      	b.n	8001478 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001362:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	691a      	ldr	r2, [r3, #16]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001380:	3b01      	subs	r3, #1
 8001382:	b29a      	uxth	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800138c:	b29b      	uxth	r3, r3
 800138e:	3b01      	subs	r3, #1
 8001390:	b29a      	uxth	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b2:	3b01      	subs	r3, #1
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013be:	b29b      	uxth	r3, r3
 80013c0:	3b01      	subs	r3, #1
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80013c8:	e042      	b.n	8001450 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 fb00 	bl	80019d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e04c      	b.n	8001478 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013fa:	3b01      	subs	r3, #1
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001406:	b29b      	uxth	r3, r3
 8001408:	3b01      	subs	r3, #1
 800140a:	b29a      	uxth	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b04      	cmp	r3, #4
 800141c:	d118      	bne.n	8001450 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	691a      	ldr	r2, [r3, #16]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800143a:	3b01      	subs	r3, #1
 800143c:	b29a      	uxth	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001446:	b29b      	uxth	r3, r3
 8001448:	3b01      	subs	r3, #1
 800144a:	b29a      	uxth	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001454:	2b00      	cmp	r3, #0
 8001456:	f47f aec2 	bne.w	80011de <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2220      	movs	r2, #32
 800145e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001476:	2302      	movs	r3, #2
  }
}
 8001478:	4618      	mov	r0, r3
 800147a:	3728      	adds	r7, #40	; 0x28
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	00010004 	.word	0x00010004

08001484 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af02      	add	r7, sp, #8
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	460b      	mov	r3, r1
 8001492:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2b08      	cmp	r3, #8
 800149e:	d006      	beq.n	80014ae <I2C_MasterRequestWrite+0x2a>
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d003      	beq.n	80014ae <I2C_MasterRequestWrite+0x2a>
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80014ac:	d108      	bne.n	80014c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	e00b      	b.n	80014d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	2b12      	cmp	r3, #18
 80014c6:	d107      	bne.n	80014d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f000 f91d 	bl	8001724 <I2C_WaitOnFlagUntilTimeout>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00d      	beq.n	800150c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014fe:	d103      	bne.n	8001508 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001506:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e035      	b.n	8001578 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001514:	d108      	bne.n	8001528 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001516:	897b      	ldrh	r3, [r7, #10]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001524:	611a      	str	r2, [r3, #16]
 8001526:	e01b      	b.n	8001560 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001528:	897b      	ldrh	r3, [r7, #10]
 800152a:	11db      	asrs	r3, r3, #7
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f003 0306 	and.w	r3, r3, #6
 8001532:	b2db      	uxtb	r3, r3
 8001534:	f063 030f 	orn	r3, r3, #15
 8001538:	b2da      	uxtb	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	490e      	ldr	r1, [pc, #56]	; (8001580 <I2C_MasterRequestWrite+0xfc>)
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f943 	bl	80017d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e010      	b.n	8001578 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001556:	897b      	ldrh	r3, [r7, #10]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	4907      	ldr	r1, [pc, #28]	; (8001584 <I2C_MasterRequestWrite+0x100>)
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 f933 	bl	80017d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	00010008 	.word	0x00010008
 8001584:	00010002 	.word	0x00010002

08001588 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af02      	add	r7, sp, #8
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	460b      	mov	r3, r1
 8001596:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d006      	beq.n	80015c2 <I2C_MasterRequestRead+0x3a>
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d003      	beq.n	80015c2 <I2C_MasterRequestRead+0x3a>
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80015c0:	d108      	bne.n	80015d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e00b      	b.n	80015ec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	2b11      	cmp	r3, #17
 80015da:	d107      	bne.n	80015ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f000 f893 	bl	8001724 <I2C_WaitOnFlagUntilTimeout>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00d      	beq.n	8001620 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001612:	d103      	bne.n	800161c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e079      	b.n	8001714 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001628:	d108      	bne.n	800163c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800162a:	897b      	ldrh	r3, [r7, #10]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	b2da      	uxtb	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	611a      	str	r2, [r3, #16]
 800163a:	e05f      	b.n	80016fc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800163c:	897b      	ldrh	r3, [r7, #10]
 800163e:	11db      	asrs	r3, r3, #7
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f003 0306 	and.w	r3, r3, #6
 8001646:	b2db      	uxtb	r3, r3
 8001648:	f063 030f 	orn	r3, r3, #15
 800164c:	b2da      	uxtb	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4930      	ldr	r1, [pc, #192]	; (800171c <I2C_MasterRequestRead+0x194>)
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 f8b9 	bl	80017d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e054      	b.n	8001714 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800166a:	897b      	ldrh	r3, [r7, #10]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	4929      	ldr	r1, [pc, #164]	; (8001720 <I2C_MasterRequestRead+0x198>)
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 f8a9 	bl	80017d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e044      	b.n	8001714 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f000 f831 	bl	8001724 <I2C_WaitOnFlagUntilTimeout>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00d      	beq.n	80016e4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016d6:	d103      	bne.n	80016e0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016de:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e017      	b.n	8001714 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80016e4:	897b      	ldrh	r3, [r7, #10]
 80016e6:	11db      	asrs	r3, r3, #7
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f003 0306 	and.w	r3, r3, #6
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f063 030e 	orn	r3, r3, #14
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	4907      	ldr	r1, [pc, #28]	; (8001720 <I2C_MasterRequestRead+0x198>)
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 f865 	bl	80017d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	00010008 	.word	0x00010008
 8001720:	00010002 	.word	0x00010002

08001724 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	4613      	mov	r3, r2
 8001732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001734:	e025      	b.n	8001782 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800173c:	d021      	beq.n	8001782 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800173e:	f7fe ffa5 	bl	800068c <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d302      	bcc.n	8001754 <I2C_WaitOnFlagUntilTimeout+0x30>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d116      	bne.n	8001782 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2220      	movs	r2, #32
 800175e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f043 0220 	orr.w	r2, r3, #32
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e023      	b.n	80017ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	0c1b      	lsrs	r3, r3, #16
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b01      	cmp	r3, #1
 800178a:	d10d      	bne.n	80017a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	43da      	mvns	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4013      	ands	r3, r2
 8001798:	b29b      	uxth	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	bf0c      	ite	eq
 800179e:	2301      	moveq	r3, #1
 80017a0:	2300      	movne	r3, #0
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	e00c      	b.n	80017c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4013      	ands	r3, r2
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	bf0c      	ite	eq
 80017ba:	2301      	moveq	r3, #1
 80017bc:	2300      	movne	r3, #0
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	461a      	mov	r2, r3
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d0b6      	beq.n	8001736 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017e0:	e051      	b.n	8001886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017f0:	d123      	bne.n	800183a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001800:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800180a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2220      	movs	r2, #32
 8001816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f043 0204 	orr.w	r2, r3, #4
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e046      	b.n	80018c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d021      	beq.n	8001886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001842:	f7fe ff23 	bl	800068c <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	429a      	cmp	r2, r3
 8001850:	d302      	bcc.n	8001858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d116      	bne.n	8001886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2220      	movs	r2, #32
 8001862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f043 0220 	orr.w	r2, r3, #32
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e020      	b.n	80018c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	0c1b      	lsrs	r3, r3, #16
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b01      	cmp	r3, #1
 800188e:	d10c      	bne.n	80018aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	43da      	mvns	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4013      	ands	r3, r2
 800189c:	b29b      	uxth	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bf14      	ite	ne
 80018a2:	2301      	movne	r3, #1
 80018a4:	2300      	moveq	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	e00b      	b.n	80018c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	43da      	mvns	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	4013      	ands	r3, r2
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf14      	ite	ne
 80018bc:	2301      	movne	r3, #1
 80018be:	2300      	moveq	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d18d      	bne.n	80017e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018dc:	e02d      	b.n	800193a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 f8ce 	bl	8001a80 <I2C_IsAcknowledgeFailed>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e02d      	b.n	800194a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f4:	d021      	beq.n	800193a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018f6:	f7fe fec9 	bl	800068c <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	429a      	cmp	r2, r3
 8001904:	d302      	bcc.n	800190c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d116      	bne.n	800193a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2220      	movs	r2, #32
 8001916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f043 0220 	orr.w	r2, r3, #32
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e007      	b.n	800194a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001944:	2b80      	cmp	r3, #128	; 0x80
 8001946:	d1ca      	bne.n	80018de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800195e:	e02d      	b.n	80019bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f000 f88d 	bl	8001a80 <I2C_IsAcknowledgeFailed>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e02d      	b.n	80019cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001976:	d021      	beq.n	80019bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001978:	f7fe fe88 	bl	800068c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	429a      	cmp	r2, r3
 8001986:	d302      	bcc.n	800198e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d116      	bne.n	80019bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2220      	movs	r2, #32
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f043 0220 	orr.w	r2, r3, #32
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e007      	b.n	80019cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d1ca      	bne.n	8001960 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019e0:	e042      	b.n	8001a68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	2b10      	cmp	r3, #16
 80019ee:	d119      	bne.n	8001a24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f06f 0210 	mvn.w	r2, #16
 80019f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2220      	movs	r2, #32
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e029      	b.n	8001a78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a24:	f7fe fe32 	bl	800068c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d302      	bcc.n	8001a3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d116      	bne.n	8001a68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2220      	movs	r2, #32
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f043 0220 	orr.w	r2, r3, #32
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e007      	b.n	8001a78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a72:	2b40      	cmp	r3, #64	; 0x40
 8001a74:	d1b5      	bne.n	80019e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a96:	d11b      	bne.n	8001ad0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001aa0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	f043 0204 	orr.w	r2, r3, #4
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0cc      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001af4:	4b68      	ldr	r3, [pc, #416]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d90c      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b65      	ldr	r3, [pc, #404]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b63      	ldr	r3, [pc, #396]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0b8      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d020      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b34:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a58      	ldr	r2, [pc, #352]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b4c:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	4a52      	ldr	r2, [pc, #328]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b58:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	494d      	ldr	r1, [pc, #308]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d044      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d119      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e07f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d003      	beq.n	8001b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9e:	4b3f      	ldr	r3, [pc, #252]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e06f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e067      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bbe:	4b37      	ldr	r3, [pc, #220]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f023 0203 	bic.w	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4934      	ldr	r1, [pc, #208]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd0:	f7fe fd5c 	bl	800068c <HAL_GetTick>
 8001bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd8:	f7fe fd58 	bl	800068c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e04f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 020c 	and.w	r2, r3, #12
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d1eb      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c00:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d20c      	bcs.n	8001c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e032      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4916      	ldr	r1, [pc, #88]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	490e      	ldr	r1, [pc, #56]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c66:	f000 f821 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8001c6a:	4601      	mov	r1, r0
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	5cd3      	ldrb	r3, [r2, r3]
 8001c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8001c7e:	4a09      	ldr	r2, [pc, #36]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fcbc 	bl	8000604 <HAL_InitTick>

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40023c00 	.word	0x40023c00
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	08004124 	.word	0x08004124
 8001ca4:	20000008 	.word	0x20000008
 8001ca8:	20000000 	.word	0x20000000

08001cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc2:	4b63      	ldr	r3, [pc, #396]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d007      	beq.n	8001cde <HAL_RCC_GetSysClockFreq+0x32>
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d008      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x38>
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f040 80b4 	bne.w	8001e40 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cd8:	4b5e      	ldr	r3, [pc, #376]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001cda:	60bb      	str	r3, [r7, #8]
       break;
 8001cdc:	e0b3      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cde:	4b5e      	ldr	r3, [pc, #376]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001ce0:	60bb      	str	r3, [r7, #8]
      break;
 8001ce2:	e0b0      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ce4:	4b5a      	ldr	r3, [pc, #360]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cee:	4b58      	ldr	r3, [pc, #352]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d04a      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cfa:	4b55      	ldr	r3, [pc, #340]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	099b      	lsrs	r3, r3, #6
 8001d00:	f04f 0400 	mov.w	r4, #0
 8001d04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	ea03 0501 	and.w	r5, r3, r1
 8001d10:	ea04 0602 	and.w	r6, r4, r2
 8001d14:	4629      	mov	r1, r5
 8001d16:	4632      	mov	r2, r6
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	f04f 0400 	mov.w	r4, #0
 8001d20:	0154      	lsls	r4, r2, #5
 8001d22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d26:	014b      	lsls	r3, r1, #5
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4622      	mov	r2, r4
 8001d2c:	1b49      	subs	r1, r1, r5
 8001d2e:	eb62 0206 	sbc.w	r2, r2, r6
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	f04f 0400 	mov.w	r4, #0
 8001d3a:	0194      	lsls	r4, r2, #6
 8001d3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d40:	018b      	lsls	r3, r1, #6
 8001d42:	1a5b      	subs	r3, r3, r1
 8001d44:	eb64 0402 	sbc.w	r4, r4, r2
 8001d48:	f04f 0100 	mov.w	r1, #0
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	00e2      	lsls	r2, r4, #3
 8001d52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d56:	00d9      	lsls	r1, r3, #3
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4614      	mov	r4, r2
 8001d5c:	195b      	adds	r3, r3, r5
 8001d5e:	eb44 0406 	adc.w	r4, r4, r6
 8001d62:	f04f 0100 	mov.w	r1, #0
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	0262      	lsls	r2, r4, #9
 8001d6c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001d70:	0259      	lsls	r1, r3, #9
 8001d72:	460b      	mov	r3, r1
 8001d74:	4614      	mov	r4, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	4621      	mov	r1, r4
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f04f 0400 	mov.w	r4, #0
 8001d80:	461a      	mov	r2, r3
 8001d82:	4623      	mov	r3, r4
 8001d84:	f7fe fa9c 	bl	80002c0 <__aeabi_uldivmod>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	460c      	mov	r4, r1
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	e049      	b.n	8001e24 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d90:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	099b      	lsrs	r3, r3, #6
 8001d96:	f04f 0400 	mov.w	r4, #0
 8001d9a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	ea03 0501 	and.w	r5, r3, r1
 8001da6:	ea04 0602 	and.w	r6, r4, r2
 8001daa:	4629      	mov	r1, r5
 8001dac:	4632      	mov	r2, r6
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	f04f 0400 	mov.w	r4, #0
 8001db6:	0154      	lsls	r4, r2, #5
 8001db8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dbc:	014b      	lsls	r3, r1, #5
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4622      	mov	r2, r4
 8001dc2:	1b49      	subs	r1, r1, r5
 8001dc4:	eb62 0206 	sbc.w	r2, r2, r6
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	f04f 0400 	mov.w	r4, #0
 8001dd0:	0194      	lsls	r4, r2, #6
 8001dd2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001dd6:	018b      	lsls	r3, r1, #6
 8001dd8:	1a5b      	subs	r3, r3, r1
 8001dda:	eb64 0402 	sbc.w	r4, r4, r2
 8001dde:	f04f 0100 	mov.w	r1, #0
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	00e2      	lsls	r2, r4, #3
 8001de8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001dec:	00d9      	lsls	r1, r3, #3
 8001dee:	460b      	mov	r3, r1
 8001df0:	4614      	mov	r4, r2
 8001df2:	195b      	adds	r3, r3, r5
 8001df4:	eb44 0406 	adc.w	r4, r4, r6
 8001df8:	f04f 0100 	mov.w	r1, #0
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	02a2      	lsls	r2, r4, #10
 8001e02:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e06:	0299      	lsls	r1, r3, #10
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4614      	mov	r4, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	4621      	mov	r1, r4
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f04f 0400 	mov.w	r4, #0
 8001e16:	461a      	mov	r2, r3
 8001e18:	4623      	mov	r3, r4
 8001e1a:	f7fe fa51 	bl	80002c0 <__aeabi_uldivmod>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	460c      	mov	r4, r1
 8001e22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e24:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	0c1b      	lsrs	r3, r3, #16
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	3301      	adds	r3, #1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3c:	60bb      	str	r3, [r7, #8]
      break;
 8001e3e:	e002      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001e42:	60bb      	str	r3, [r7, #8]
      break;
 8001e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e46:	68bb      	ldr	r3, [r7, #8]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e50:	40023800 	.word	0x40023800
 8001e54:	00f42400 	.word	0x00f42400
 8001e58:	007a1200 	.word	0x007a1200

08001e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000008 	.word	0x20000008

08001e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e78:	f7ff fff0 	bl	8001e5c <HAL_RCC_GetHCLKFreq>
 8001e7c:	4601      	mov	r1, r0
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	0a9b      	lsrs	r3, r3, #10
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	4a03      	ldr	r2, [pc, #12]	; (8001e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40023800 	.word	0x40023800
 8001e98:	08004134 	.word	0x08004134

08001e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ea0:	f7ff ffdc 	bl	8001e5c <HAL_RCC_GetHCLKFreq>
 8001ea4:	4601      	mov	r1, r0
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	0b5b      	lsrs	r3, r3, #13
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4a03      	ldr	r2, [pc, #12]	; (8001ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eb2:	5cd3      	ldrb	r3, [r2, r3]
 8001eb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	08004134 	.word	0x08004134

08001ec4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d075      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001edc:	4ba2      	ldr	r3, [pc, #648]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d00c      	beq.n	8001f02 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee8:	4b9f      	ldr	r3, [pc, #636]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d112      	bne.n	8001f1a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef4:	4b9c      	ldr	r3, [pc, #624]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f00:	d10b      	bne.n	8001f1a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f02:	4b99      	ldr	r3, [pc, #612]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d05b      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x102>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d157      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e20b      	b.n	8002332 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x6e>
 8001f24:	4b90      	ldr	r3, [pc, #576]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a8f      	ldr	r2, [pc, #572]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	e01d      	b.n	8001f6e <HAL_RCC_OscConfig+0xaa>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f3a:	d10c      	bne.n	8001f56 <HAL_RCC_OscConfig+0x92>
 8001f3c:	4b8a      	ldr	r3, [pc, #552]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a89      	ldr	r2, [pc, #548]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001f42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b87      	ldr	r3, [pc, #540]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a86      	ldr	r2, [pc, #536]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	e00b      	b.n	8001f6e <HAL_RCC_OscConfig+0xaa>
 8001f56:	4b84      	ldr	r3, [pc, #528]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a83      	ldr	r2, [pc, #524]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	4b81      	ldr	r3, [pc, #516]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a80      	ldr	r2, [pc, #512]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d013      	beq.n	8001f9e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7fe fb89 	bl	800068c <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f7e:	f7fe fb85 	bl	800068c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b64      	cmp	r3, #100	; 0x64
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e1d0      	b.n	8002332 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f90:	4b75      	ldr	r3, [pc, #468]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0xba>
 8001f9c:	e014      	b.n	8001fc8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7fe fb75 	bl	800068c <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa6:	f7fe fb71 	bl	800068c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b64      	cmp	r3, #100	; 0x64
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e1bc      	b.n	8002332 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb8:	4b6b      	ldr	r3, [pc, #428]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0xe2>
 8001fc4:	e000      	b.n	8001fc8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d063      	beq.n	800209c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fd4:	4b64      	ldr	r3, [pc, #400]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00b      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe0:	4b61      	ldr	r3, [pc, #388]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d11c      	bne.n	8002026 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fec:	4b5e      	ldr	r3, [pc, #376]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d116      	bne.n	8002026 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff8:	4b5b      	ldr	r3, [pc, #364]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_OscConfig+0x14c>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d001      	beq.n	8002010 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e190      	b.n	8002332 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	4b55      	ldr	r3, [pc, #340]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4952      	ldr	r1, [pc, #328]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002024:	e03a      	b.n	800209c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d020      	beq.n	8002070 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800202e:	4b4f      	ldr	r3, [pc, #316]	; (800216c <HAL_RCC_OscConfig+0x2a8>)
 8002030:	2201      	movs	r2, #1
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7fe fb2a 	bl	800068c <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800203c:	f7fe fb26 	bl	800068c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e171      	b.n	8002332 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204e:	4b46      	ldr	r3, [pc, #280]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205a:	4b43      	ldr	r3, [pc, #268]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	493f      	ldr	r1, [pc, #252]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
 800206e:	e015      	b.n	800209c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002070:	4b3e      	ldr	r3, [pc, #248]	; (800216c <HAL_RCC_OscConfig+0x2a8>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7fe fb09 	bl	800068c <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207e:	f7fe fb05 	bl	800068c <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e150      	b.n	8002332 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002090:	4b35      	ldr	r3, [pc, #212]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f0      	bne.n	800207e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d030      	beq.n	800210a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d016      	beq.n	80020de <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b0:	4b2f      	ldr	r3, [pc, #188]	; (8002170 <HAL_RCC_OscConfig+0x2ac>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b6:	f7fe fae9 	bl	800068c <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020be:	f7fe fae5 	bl	800068c <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e130      	b.n	8002332 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d0:	4b25      	ldr	r3, [pc, #148]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 80020d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x1fa>
 80020dc:	e015      	b.n	800210a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020de:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e4:	f7fe fad2 	bl	800068c <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ec:	f7fe face 	bl	800068c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e119      	b.n	8002332 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fe:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8002100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 809f 	beq.w	8002256 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002118:	2300      	movs	r3, #0
 800211a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10f      	bne.n	8002148 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	4a0d      	ldr	r2, [pc, #52]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 8002132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002136:	6413      	str	r3, [r2, #64]	; 0x40
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_RCC_OscConfig+0x2a4>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002144:	2301      	movs	r3, #1
 8002146:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_RCC_OscConfig+0x2b0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d120      	bne.n	8002196 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002154:	4b07      	ldr	r3, [pc, #28]	; (8002174 <HAL_RCC_OscConfig+0x2b0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a06      	ldr	r2, [pc, #24]	; (8002174 <HAL_RCC_OscConfig+0x2b0>)
 800215a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002160:	f7fe fa94 	bl	800068c <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002166:	e010      	b.n	800218a <HAL_RCC_OscConfig+0x2c6>
 8002168:	40023800 	.word	0x40023800
 800216c:	42470000 	.word	0x42470000
 8002170:	42470e80 	.word	0x42470e80
 8002174:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002178:	f7fe fa88 	bl	800068c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e0d3      	b.n	8002332 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218a:	4b6c      	ldr	r3, [pc, #432]	; (800233c <HAL_RCC_OscConfig+0x478>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d106      	bne.n	80021ac <HAL_RCC_OscConfig+0x2e8>
 800219e:	4b68      	ldr	r3, [pc, #416]	; (8002340 <HAL_RCC_OscConfig+0x47c>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a2:	4a67      	ldr	r2, [pc, #412]	; (8002340 <HAL_RCC_OscConfig+0x47c>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6713      	str	r3, [r2, #112]	; 0x70
 80021aa:	e01c      	b.n	80021e6 <HAL_RCC_OscConfig+0x322>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d10c      	bne.n	80021ce <HAL_RCC_OscConfig+0x30a>
 80021b4:	4b62      	ldr	r3, [pc, #392]	; (8002340 <HAL_RCC_OscConfig+0x47c>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	4a61      	ldr	r2, [pc, #388]	; (8002340 <HAL_RCC_OscConfig+0x47c>)
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	6713      	str	r3, [r2, #112]	; 0x70
 80021c0:	4b5f      	ldr	r3, [pc, #380]	; (8002340 <HAL_RCC_OscConfig+0x47c>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	4a5e      	ldr	r2, [pc, #376]	; (8002340 <HAL_RCC_OscConfig+0x47c>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6713      	str	r3, [r2, #112]	; 0x70
 80021cc:	e00b      	b.n	80021e6 <HAL_RCC_OscConfig+0x322>
 80021ce:	4b5c      	ldr	r3, [pc, #368]	; (8002340 <HAL_RCC_OscConfig+0x47c>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	4a5b      	ldr	r2, [pc, #364]	; (8002340 <HAL_RCC_OscConfig+0x47c>)
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	6713      	str	r3, [r2, #112]	; 0x70
 80021da:	4b59      	ldr	r3, [pc, #356]	; (8002340 <HAL_RCC_OscConfig+0x47c>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021de:	4a58      	ldr	r2, [pc, #352]	; (8002340 <HAL_RCC_OscConfig+0x47c>)
 80021e0:	f023 0304 	bic.w	r3, r3, #4
 80021e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d015      	beq.n	800221a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ee:	f7fe fa4d 	bl	800068c <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f4:	e00a      	b.n	800220c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f7fe fa49 	bl	800068c <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	; 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e092      	b.n	8002332 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220c:	4b4c      	ldr	r3, [pc, #304]	; (8002340 <HAL_RCC_OscConfig+0x47c>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0ee      	beq.n	80021f6 <HAL_RCC_OscConfig+0x332>
 8002218:	e014      	b.n	8002244 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221a:	f7fe fa37 	bl	800068c <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002220:	e00a      	b.n	8002238 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7fe fa33 	bl	800068c <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e07c      	b.n	8002332 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002238:	4b41      	ldr	r3, [pc, #260]	; (8002340 <HAL_RCC_OscConfig+0x47c>)
 800223a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1ee      	bne.n	8002222 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002244:	7dfb      	ldrb	r3, [r7, #23]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d105      	bne.n	8002256 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224a:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <HAL_RCC_OscConfig+0x47c>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	4a3c      	ldr	r2, [pc, #240]	; (8002340 <HAL_RCC_OscConfig+0x47c>)
 8002250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002254:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d068      	beq.n	8002330 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800225e:	4b38      	ldr	r3, [pc, #224]	; (8002340 <HAL_RCC_OscConfig+0x47c>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b08      	cmp	r3, #8
 8002268:	d060      	beq.n	800232c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d145      	bne.n	80022fe <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002272:	4b34      	ldr	r3, [pc, #208]	; (8002344 <HAL_RCC_OscConfig+0x480>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7fe fa08 	bl	800068c <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002280:	f7fe fa04 	bl	800068c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e04f      	b.n	8002332 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <HAL_RCC_OscConfig+0x47c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	019b      	lsls	r3, r3, #6
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	085b      	lsrs	r3, r3, #1
 80022b6:	3b01      	subs	r3, #1
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	061b      	lsls	r3, r3, #24
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	071b      	lsls	r3, r3, #28
 80022ca:	491d      	ldr	r1, [pc, #116]	; (8002340 <HAL_RCC_OscConfig+0x47c>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d0:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <HAL_RCC_OscConfig+0x480>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7fe f9d9 	bl	800068c <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022de:	f7fe f9d5 	bl	800068c <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e020      	b.n	8002332 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f0:	4b13      	ldr	r3, [pc, #76]	; (8002340 <HAL_RCC_OscConfig+0x47c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x41a>
 80022fc:	e018      	b.n	8002330 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_RCC_OscConfig+0x480>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7fe f9c2 	bl	800068c <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800230c:	f7fe f9be 	bl	800068c <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e009      	b.n	8002332 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231e:	4b08      	ldr	r3, [pc, #32]	; (8002340 <HAL_RCC_OscConfig+0x47c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x448>
 800232a:	e001      	b.n	8002330 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40007000 	.word	0x40007000
 8002340:	40023800 	.word	0x40023800
 8002344:	42470060 	.word	0x42470060

08002348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e01d      	b.n	8002396 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f001 f984 	bl	800367c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3304      	adds	r3, #4
 8002384:	4619      	mov	r1, r3
 8002386:	4610      	mov	r0, r2
 8002388:	f000 f8c0 	bl	800250c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_TIM_ConfigClockSource+0x18>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e0a6      	b.n	8002504 <HAL_TIM_ConfigClockSource+0x166>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2202      	movs	r2, #2
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023d4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023dc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b40      	cmp	r3, #64	; 0x40
 80023ec:	d067      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x120>
 80023ee:	2b40      	cmp	r3, #64	; 0x40
 80023f0:	d80b      	bhi.n	800240a <HAL_TIM_ConfigClockSource+0x6c>
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	d073      	beq.n	80024de <HAL_TIM_ConfigClockSource+0x140>
 80023f6:	2b10      	cmp	r3, #16
 80023f8:	d802      	bhi.n	8002400 <HAL_TIM_ConfigClockSource+0x62>
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d06f      	beq.n	80024de <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80023fe:	e078      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002400:	2b20      	cmp	r3, #32
 8002402:	d06c      	beq.n	80024de <HAL_TIM_ConfigClockSource+0x140>
 8002404:	2b30      	cmp	r3, #48	; 0x30
 8002406:	d06a      	beq.n	80024de <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002408:	e073      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800240a:	2b70      	cmp	r3, #112	; 0x70
 800240c:	d00d      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x8c>
 800240e:	2b70      	cmp	r3, #112	; 0x70
 8002410:	d804      	bhi.n	800241c <HAL_TIM_ConfigClockSource+0x7e>
 8002412:	2b50      	cmp	r3, #80	; 0x50
 8002414:	d033      	beq.n	800247e <HAL_TIM_ConfigClockSource+0xe0>
 8002416:	2b60      	cmp	r3, #96	; 0x60
 8002418:	d041      	beq.n	800249e <HAL_TIM_ConfigClockSource+0x100>
      break;
 800241a:	e06a      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800241c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002420:	d066      	beq.n	80024f0 <HAL_TIM_ConfigClockSource+0x152>
 8002422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002426:	d017      	beq.n	8002458 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002428:	e063      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6899      	ldr	r1, [r3, #8]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f000 f93f 	bl	80026bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800244c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	609a      	str	r2, [r3, #8]
      break;
 8002456:	e04c      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	6899      	ldr	r1, [r3, #8]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f000 f928 	bl	80026bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800247a:	609a      	str	r2, [r3, #8]
      break;
 800247c:	e039      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6859      	ldr	r1, [r3, #4]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	461a      	mov	r2, r3
 800248c:	f000 f89c 	bl	80025c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2150      	movs	r1, #80	; 0x50
 8002496:	4618      	mov	r0, r3
 8002498:	f000 f8f5 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 800249c:	e029      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6859      	ldr	r1, [r3, #4]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	461a      	mov	r2, r3
 80024ac:	f000 f8bb 	bl	8002626 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2160      	movs	r1, #96	; 0x60
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f8e5 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 80024bc:	e019      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6859      	ldr	r1, [r3, #4]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	461a      	mov	r2, r3
 80024cc:	f000 f87c 	bl	80025c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2140      	movs	r1, #64	; 0x40
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 f8d5 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 80024dc:	e009      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4619      	mov	r1, r3
 80024e8:	4610      	mov	r0, r2
 80024ea:	f000 f8cc 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 80024ee:	e000      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80024f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a26      	ldr	r2, [pc, #152]	; (80025b8 <TIM_Base_SetConfig+0xac>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d003      	beq.n	800252c <TIM_Base_SetConfig+0x20>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a25      	ldr	r2, [pc, #148]	; (80025bc <TIM_Base_SetConfig+0xb0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d108      	bne.n	800253e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <TIM_Base_SetConfig+0xac>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00b      	beq.n	800255e <TIM_Base_SetConfig+0x52>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a1c      	ldr	r2, [pc, #112]	; (80025bc <TIM_Base_SetConfig+0xb0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d007      	beq.n	800255e <TIM_Base_SetConfig+0x52>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a1b      	ldr	r2, [pc, #108]	; (80025c0 <TIM_Base_SetConfig+0xb4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d003      	beq.n	800255e <TIM_Base_SetConfig+0x52>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a1a      	ldr	r2, [pc, #104]	; (80025c4 <TIM_Base_SetConfig+0xb8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d108      	bne.n	8002570 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	4313      	orrs	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <TIM_Base_SetConfig+0xac>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d103      	bne.n	80025a4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	615a      	str	r2, [r3, #20]
}
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40010000 	.word	0x40010000
 80025bc:	40000c00 	.word	0x40000c00
 80025c0:	40014000 	.word	0x40014000
 80025c4:	40014800 	.word	0x40014800

080025c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	f023 0201 	bic.w	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f023 030a 	bic.w	r3, r3, #10
 8002604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	4313      	orrs	r3, r2
 800260c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	621a      	str	r2, [r3, #32]
}
 800261a:	bf00      	nop
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002626:	b480      	push	{r7}
 8002628:	b087      	sub	sp, #28
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	f023 0210 	bic.w	r2, r3, #16
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002650:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	031b      	lsls	r3, r3, #12
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002662:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	621a      	str	r2, [r3, #32]
}
 800267a:	bf00      	nop
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002686:	b480      	push	{r7}
 8002688:	b085      	sub	sp, #20
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f043 0307 	orr.w	r3, r3, #7
 80026a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	609a      	str	r2, [r3, #8]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	021a      	lsls	r2, r3, #8
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	431a      	orrs	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	609a      	str	r2, [r3, #8]
}
 80026f0:	bf00      	nop
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002710:	2302      	movs	r3, #2
 8002712:	e041      	b.n	8002798 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d009      	beq.n	800276c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d004      	beq.n	800276c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a11      	ldr	r2, [pc, #68]	; (80027ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d10c      	bne.n	8002786 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002772:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	4313      	orrs	r3, r2
 800277c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	40010000 	.word	0x40010000
 80027a8:	40000c00 	.word	0x40000c00
 80027ac:	40014000 	.word	0x40014000

080027b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e03f      	b.n	8002842 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 ff72 	bl	80036c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2224      	movs	r2, #36	; 0x24
 80027e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f90b 	bl	8002a10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002818:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002828:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b088      	sub	sp, #32
 800284e:	af02      	add	r7, sp, #8
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	603b      	str	r3, [r7, #0]
 8002856:	4613      	mov	r3, r2
 8002858:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b20      	cmp	r3, #32
 8002868:	f040 8083 	bne.w	8002972 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_UART_Transmit+0x2e>
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e07b      	b.n	8002974 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_UART_Transmit+0x40>
 8002886:	2302      	movs	r3, #2
 8002888:	e074      	b.n	8002974 <HAL_UART_Transmit+0x12a>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2221      	movs	r2, #33	; 0x21
 800289c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028a0:	f7fd fef4 	bl	800068c <HAL_GetTick>
 80028a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	88fa      	ldrh	r2, [r7, #6]
 80028aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	88fa      	ldrh	r2, [r7, #6]
 80028b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80028ba:	e042      	b.n	8002942 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d2:	d122      	bne.n	800291a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2200      	movs	r2, #0
 80028dc:	2180      	movs	r1, #128	; 0x80
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f84c 	bl	800297c <UART_WaitOnFlagUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e042      	b.n	8002974 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002900:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	3302      	adds	r3, #2
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	e017      	b.n	8002942 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	3301      	adds	r3, #1
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	e013      	b.n	8002942 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2200      	movs	r2, #0
 8002922:	2180      	movs	r1, #128	; 0x80
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 f829 	bl	800297c <UART_WaitOnFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e01f      	b.n	8002974 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	60ba      	str	r2, [r7, #8]
 800293a:	781a      	ldrb	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1b7      	bne.n	80028bc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2200      	movs	r2, #0
 8002954:	2140      	movs	r1, #64	; 0x40
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f810 	bl	800297c <UART_WaitOnFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e006      	b.n	8002974 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	e000      	b.n	8002974 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002972:	2302      	movs	r3, #2
  }
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	4613      	mov	r3, r2
 800298a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800298c:	e02c      	b.n	80029e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d028      	beq.n	80029e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d007      	beq.n	80029ac <UART_WaitOnFlagUntilTimeout+0x30>
 800299c:	f7fd fe76 	bl	800068c <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d21d      	bcs.n	80029e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e00f      	b.n	8002a08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	4013      	ands	r3, r2
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d0c3      	beq.n	800298e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a14:	b085      	sub	sp, #20
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002a52:	f023 030c 	bic.w	r3, r3, #12
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	68f9      	ldr	r1, [r7, #12]
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a7e:	f040 818b 	bne.w	8002d98 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4ac1      	ldr	r2, [pc, #772]	; (8002d8c <UART_SetConfig+0x37c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d005      	beq.n	8002a98 <UART_SetConfig+0x88>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4abf      	ldr	r2, [pc, #764]	; (8002d90 <UART_SetConfig+0x380>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	f040 80bd 	bne.w	8002c12 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a98:	f7ff fa00 	bl	8001e9c <HAL_RCC_GetPCLK2Freq>
 8002a9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	461d      	mov	r5, r3
 8002aa2:	f04f 0600 	mov.w	r6, #0
 8002aa6:	46a8      	mov	r8, r5
 8002aa8:	46b1      	mov	r9, r6
 8002aaa:	eb18 0308 	adds.w	r3, r8, r8
 8002aae:	eb49 0409 	adc.w	r4, r9, r9
 8002ab2:	4698      	mov	r8, r3
 8002ab4:	46a1      	mov	r9, r4
 8002ab6:	eb18 0805 	adds.w	r8, r8, r5
 8002aba:	eb49 0906 	adc.w	r9, r9, r6
 8002abe:	f04f 0100 	mov.w	r1, #0
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002aca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ace:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ad2:	4688      	mov	r8, r1
 8002ad4:	4691      	mov	r9, r2
 8002ad6:	eb18 0005 	adds.w	r0, r8, r5
 8002ada:	eb49 0106 	adc.w	r1, r9, r6
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	461d      	mov	r5, r3
 8002ae4:	f04f 0600 	mov.w	r6, #0
 8002ae8:	196b      	adds	r3, r5, r5
 8002aea:	eb46 0406 	adc.w	r4, r6, r6
 8002aee:	461a      	mov	r2, r3
 8002af0:	4623      	mov	r3, r4
 8002af2:	f7fd fbe5 	bl	80002c0 <__aeabi_uldivmod>
 8002af6:	4603      	mov	r3, r0
 8002af8:	460c      	mov	r4, r1
 8002afa:	461a      	mov	r2, r3
 8002afc:	4ba5      	ldr	r3, [pc, #660]	; (8002d94 <UART_SetConfig+0x384>)
 8002afe:	fba3 2302 	umull	r2, r3, r3, r2
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	461d      	mov	r5, r3
 8002b0c:	f04f 0600 	mov.w	r6, #0
 8002b10:	46a9      	mov	r9, r5
 8002b12:	46b2      	mov	sl, r6
 8002b14:	eb19 0309 	adds.w	r3, r9, r9
 8002b18:	eb4a 040a 	adc.w	r4, sl, sl
 8002b1c:	4699      	mov	r9, r3
 8002b1e:	46a2      	mov	sl, r4
 8002b20:	eb19 0905 	adds.w	r9, r9, r5
 8002b24:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b28:	f04f 0100 	mov.w	r1, #0
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b3c:	4689      	mov	r9, r1
 8002b3e:	4692      	mov	sl, r2
 8002b40:	eb19 0005 	adds.w	r0, r9, r5
 8002b44:	eb4a 0106 	adc.w	r1, sl, r6
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	461d      	mov	r5, r3
 8002b4e:	f04f 0600 	mov.w	r6, #0
 8002b52:	196b      	adds	r3, r5, r5
 8002b54:	eb46 0406 	adc.w	r4, r6, r6
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4623      	mov	r3, r4
 8002b5c:	f7fd fbb0 	bl	80002c0 <__aeabi_uldivmod>
 8002b60:	4603      	mov	r3, r0
 8002b62:	460c      	mov	r4, r1
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b8b      	ldr	r3, [pc, #556]	; (8002d94 <UART_SetConfig+0x384>)
 8002b68:	fba3 1302 	umull	r1, r3, r3, r2
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	2164      	movs	r1, #100	; 0x64
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	3332      	adds	r3, #50	; 0x32
 8002b7a:	4a86      	ldr	r2, [pc, #536]	; (8002d94 <UART_SetConfig+0x384>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b88:	4498      	add	r8, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	461d      	mov	r5, r3
 8002b8e:	f04f 0600 	mov.w	r6, #0
 8002b92:	46a9      	mov	r9, r5
 8002b94:	46b2      	mov	sl, r6
 8002b96:	eb19 0309 	adds.w	r3, r9, r9
 8002b9a:	eb4a 040a 	adc.w	r4, sl, sl
 8002b9e:	4699      	mov	r9, r3
 8002ba0:	46a2      	mov	sl, r4
 8002ba2:	eb19 0905 	adds.w	r9, r9, r5
 8002ba6:	eb4a 0a06 	adc.w	sl, sl, r6
 8002baa:	f04f 0100 	mov.w	r1, #0
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bbe:	4689      	mov	r9, r1
 8002bc0:	4692      	mov	sl, r2
 8002bc2:	eb19 0005 	adds.w	r0, r9, r5
 8002bc6:	eb4a 0106 	adc.w	r1, sl, r6
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	461d      	mov	r5, r3
 8002bd0:	f04f 0600 	mov.w	r6, #0
 8002bd4:	196b      	adds	r3, r5, r5
 8002bd6:	eb46 0406 	adc.w	r4, r6, r6
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4623      	mov	r3, r4
 8002bde:	f7fd fb6f 	bl	80002c0 <__aeabi_uldivmod>
 8002be2:	4603      	mov	r3, r0
 8002be4:	460c      	mov	r4, r1
 8002be6:	461a      	mov	r2, r3
 8002be8:	4b6a      	ldr	r3, [pc, #424]	; (8002d94 <UART_SetConfig+0x384>)
 8002bea:	fba3 1302 	umull	r1, r3, r3, r2
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2164      	movs	r1, #100	; 0x64
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	3332      	adds	r3, #50	; 0x32
 8002bfc:	4a65      	ldr	r2, [pc, #404]	; (8002d94 <UART_SetConfig+0x384>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	f003 0207 	and.w	r2, r3, #7
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4442      	add	r2, r8
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	e26f      	b.n	80030f2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c12:	f7ff f92f 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8002c16:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	461d      	mov	r5, r3
 8002c1c:	f04f 0600 	mov.w	r6, #0
 8002c20:	46a8      	mov	r8, r5
 8002c22:	46b1      	mov	r9, r6
 8002c24:	eb18 0308 	adds.w	r3, r8, r8
 8002c28:	eb49 0409 	adc.w	r4, r9, r9
 8002c2c:	4698      	mov	r8, r3
 8002c2e:	46a1      	mov	r9, r4
 8002c30:	eb18 0805 	adds.w	r8, r8, r5
 8002c34:	eb49 0906 	adc.w	r9, r9, r6
 8002c38:	f04f 0100 	mov.w	r1, #0
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c44:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c48:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c4c:	4688      	mov	r8, r1
 8002c4e:	4691      	mov	r9, r2
 8002c50:	eb18 0005 	adds.w	r0, r8, r5
 8002c54:	eb49 0106 	adc.w	r1, r9, r6
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	461d      	mov	r5, r3
 8002c5e:	f04f 0600 	mov.w	r6, #0
 8002c62:	196b      	adds	r3, r5, r5
 8002c64:	eb46 0406 	adc.w	r4, r6, r6
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4623      	mov	r3, r4
 8002c6c:	f7fd fb28 	bl	80002c0 <__aeabi_uldivmod>
 8002c70:	4603      	mov	r3, r0
 8002c72:	460c      	mov	r4, r1
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b47      	ldr	r3, [pc, #284]	; (8002d94 <UART_SetConfig+0x384>)
 8002c78:	fba3 2302 	umull	r2, r3, r3, r2
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	461d      	mov	r5, r3
 8002c86:	f04f 0600 	mov.w	r6, #0
 8002c8a:	46a9      	mov	r9, r5
 8002c8c:	46b2      	mov	sl, r6
 8002c8e:	eb19 0309 	adds.w	r3, r9, r9
 8002c92:	eb4a 040a 	adc.w	r4, sl, sl
 8002c96:	4699      	mov	r9, r3
 8002c98:	46a2      	mov	sl, r4
 8002c9a:	eb19 0905 	adds.w	r9, r9, r5
 8002c9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ca2:	f04f 0100 	mov.w	r1, #0
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cb6:	4689      	mov	r9, r1
 8002cb8:	4692      	mov	sl, r2
 8002cba:	eb19 0005 	adds.w	r0, r9, r5
 8002cbe:	eb4a 0106 	adc.w	r1, sl, r6
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	461d      	mov	r5, r3
 8002cc8:	f04f 0600 	mov.w	r6, #0
 8002ccc:	196b      	adds	r3, r5, r5
 8002cce:	eb46 0406 	adc.w	r4, r6, r6
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	4623      	mov	r3, r4
 8002cd6:	f7fd faf3 	bl	80002c0 <__aeabi_uldivmod>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	460c      	mov	r4, r1
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4b2c      	ldr	r3, [pc, #176]	; (8002d94 <UART_SetConfig+0x384>)
 8002ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2164      	movs	r1, #100	; 0x64
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	3332      	adds	r3, #50	; 0x32
 8002cf4:	4a27      	ldr	r2, [pc, #156]	; (8002d94 <UART_SetConfig+0x384>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d02:	4498      	add	r8, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	461d      	mov	r5, r3
 8002d08:	f04f 0600 	mov.w	r6, #0
 8002d0c:	46a9      	mov	r9, r5
 8002d0e:	46b2      	mov	sl, r6
 8002d10:	eb19 0309 	adds.w	r3, r9, r9
 8002d14:	eb4a 040a 	adc.w	r4, sl, sl
 8002d18:	4699      	mov	r9, r3
 8002d1a:	46a2      	mov	sl, r4
 8002d1c:	eb19 0905 	adds.w	r9, r9, r5
 8002d20:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d24:	f04f 0100 	mov.w	r1, #0
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d38:	4689      	mov	r9, r1
 8002d3a:	4692      	mov	sl, r2
 8002d3c:	eb19 0005 	adds.w	r0, r9, r5
 8002d40:	eb4a 0106 	adc.w	r1, sl, r6
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	461d      	mov	r5, r3
 8002d4a:	f04f 0600 	mov.w	r6, #0
 8002d4e:	196b      	adds	r3, r5, r5
 8002d50:	eb46 0406 	adc.w	r4, r6, r6
 8002d54:	461a      	mov	r2, r3
 8002d56:	4623      	mov	r3, r4
 8002d58:	f7fd fab2 	bl	80002c0 <__aeabi_uldivmod>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	460c      	mov	r4, r1
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <UART_SetConfig+0x384>)
 8002d64:	fba3 1302 	umull	r1, r3, r3, r2
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	2164      	movs	r1, #100	; 0x64
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	3332      	adds	r3, #50	; 0x32
 8002d76:	4a07      	ldr	r2, [pc, #28]	; (8002d94 <UART_SetConfig+0x384>)
 8002d78:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7c:	095b      	lsrs	r3, r3, #5
 8002d7e:	f003 0207 	and.w	r2, r3, #7
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4442      	add	r2, r8
 8002d88:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002d8a:	e1b2      	b.n	80030f2 <UART_SetConfig+0x6e2>
 8002d8c:	40011000 	.word	0x40011000
 8002d90:	40011400 	.word	0x40011400
 8002d94:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4ad7      	ldr	r2, [pc, #860]	; (80030fc <UART_SetConfig+0x6ec>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d005      	beq.n	8002dae <UART_SetConfig+0x39e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4ad6      	ldr	r2, [pc, #856]	; (8003100 <UART_SetConfig+0x6f0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	f040 80d1 	bne.w	8002f50 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dae:	f7ff f875 	bl	8001e9c <HAL_RCC_GetPCLK2Freq>
 8002db2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	469a      	mov	sl, r3
 8002db8:	f04f 0b00 	mov.w	fp, #0
 8002dbc:	46d0      	mov	r8, sl
 8002dbe:	46d9      	mov	r9, fp
 8002dc0:	eb18 0308 	adds.w	r3, r8, r8
 8002dc4:	eb49 0409 	adc.w	r4, r9, r9
 8002dc8:	4698      	mov	r8, r3
 8002dca:	46a1      	mov	r9, r4
 8002dcc:	eb18 080a 	adds.w	r8, r8, sl
 8002dd0:	eb49 090b 	adc.w	r9, r9, fp
 8002dd4:	f04f 0100 	mov.w	r1, #0
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002de0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002de4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002de8:	4688      	mov	r8, r1
 8002dea:	4691      	mov	r9, r2
 8002dec:	eb1a 0508 	adds.w	r5, sl, r8
 8002df0:	eb4b 0609 	adc.w	r6, fp, r9
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	f04f 0400 	mov.w	r4, #0
 8002e06:	0094      	lsls	r4, r2, #2
 8002e08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e0c:	008b      	lsls	r3, r1, #2
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4623      	mov	r3, r4
 8002e12:	4628      	mov	r0, r5
 8002e14:	4631      	mov	r1, r6
 8002e16:	f7fd fa53 	bl	80002c0 <__aeabi_uldivmod>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	460c      	mov	r4, r1
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4bb8      	ldr	r3, [pc, #736]	; (8003104 <UART_SetConfig+0x6f4>)
 8002e22:	fba3 2302 	umull	r2, r3, r3, r2
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	469b      	mov	fp, r3
 8002e30:	f04f 0c00 	mov.w	ip, #0
 8002e34:	46d9      	mov	r9, fp
 8002e36:	46e2      	mov	sl, ip
 8002e38:	eb19 0309 	adds.w	r3, r9, r9
 8002e3c:	eb4a 040a 	adc.w	r4, sl, sl
 8002e40:	4699      	mov	r9, r3
 8002e42:	46a2      	mov	sl, r4
 8002e44:	eb19 090b 	adds.w	r9, r9, fp
 8002e48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e4c:	f04f 0100 	mov.w	r1, #0
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e60:	4689      	mov	r9, r1
 8002e62:	4692      	mov	sl, r2
 8002e64:	eb1b 0509 	adds.w	r5, fp, r9
 8002e68:	eb4c 060a 	adc.w	r6, ip, sl
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4619      	mov	r1, r3
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	f04f 0400 	mov.w	r4, #0
 8002e7e:	0094      	lsls	r4, r2, #2
 8002e80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e84:	008b      	lsls	r3, r1, #2
 8002e86:	461a      	mov	r2, r3
 8002e88:	4623      	mov	r3, r4
 8002e8a:	4628      	mov	r0, r5
 8002e8c:	4631      	mov	r1, r6
 8002e8e:	f7fd fa17 	bl	80002c0 <__aeabi_uldivmod>
 8002e92:	4603      	mov	r3, r0
 8002e94:	460c      	mov	r4, r1
 8002e96:	461a      	mov	r2, r3
 8002e98:	4b9a      	ldr	r3, [pc, #616]	; (8003104 <UART_SetConfig+0x6f4>)
 8002e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	2164      	movs	r1, #100	; 0x64
 8002ea2:	fb01 f303 	mul.w	r3, r1, r3
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	3332      	adds	r3, #50	; 0x32
 8002eac:	4a95      	ldr	r2, [pc, #596]	; (8003104 <UART_SetConfig+0x6f4>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eb8:	4498      	add	r8, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	469b      	mov	fp, r3
 8002ebe:	f04f 0c00 	mov.w	ip, #0
 8002ec2:	46d9      	mov	r9, fp
 8002ec4:	46e2      	mov	sl, ip
 8002ec6:	eb19 0309 	adds.w	r3, r9, r9
 8002eca:	eb4a 040a 	adc.w	r4, sl, sl
 8002ece:	4699      	mov	r9, r3
 8002ed0:	46a2      	mov	sl, r4
 8002ed2:	eb19 090b 	adds.w	r9, r9, fp
 8002ed6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002eda:	f04f 0100 	mov.w	r1, #0
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ee6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002eea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002eee:	4689      	mov	r9, r1
 8002ef0:	4692      	mov	sl, r2
 8002ef2:	eb1b 0509 	adds.w	r5, fp, r9
 8002ef6:	eb4c 060a 	adc.w	r6, ip, sl
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4619      	mov	r1, r3
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	f04f 0400 	mov.w	r4, #0
 8002f0c:	0094      	lsls	r4, r2, #2
 8002f0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f12:	008b      	lsls	r3, r1, #2
 8002f14:	461a      	mov	r2, r3
 8002f16:	4623      	mov	r3, r4
 8002f18:	4628      	mov	r0, r5
 8002f1a:	4631      	mov	r1, r6
 8002f1c:	f7fd f9d0 	bl	80002c0 <__aeabi_uldivmod>
 8002f20:	4603      	mov	r3, r0
 8002f22:	460c      	mov	r4, r1
 8002f24:	461a      	mov	r2, r3
 8002f26:	4b77      	ldr	r3, [pc, #476]	; (8003104 <UART_SetConfig+0x6f4>)
 8002f28:	fba3 1302 	umull	r1, r3, r3, r2
 8002f2c:	095b      	lsrs	r3, r3, #5
 8002f2e:	2164      	movs	r1, #100	; 0x64
 8002f30:	fb01 f303 	mul.w	r3, r1, r3
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	3332      	adds	r3, #50	; 0x32
 8002f3a:	4a72      	ldr	r2, [pc, #456]	; (8003104 <UART_SetConfig+0x6f4>)
 8002f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f40:	095b      	lsrs	r3, r3, #5
 8002f42:	f003 020f 	and.w	r2, r3, #15
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4442      	add	r2, r8
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	e0d0      	b.n	80030f2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f50:	f7fe ff90 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8002f54:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	469a      	mov	sl, r3
 8002f5a:	f04f 0b00 	mov.w	fp, #0
 8002f5e:	46d0      	mov	r8, sl
 8002f60:	46d9      	mov	r9, fp
 8002f62:	eb18 0308 	adds.w	r3, r8, r8
 8002f66:	eb49 0409 	adc.w	r4, r9, r9
 8002f6a:	4698      	mov	r8, r3
 8002f6c:	46a1      	mov	r9, r4
 8002f6e:	eb18 080a 	adds.w	r8, r8, sl
 8002f72:	eb49 090b 	adc.w	r9, r9, fp
 8002f76:	f04f 0100 	mov.w	r1, #0
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f82:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f86:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f8a:	4688      	mov	r8, r1
 8002f8c:	4691      	mov	r9, r2
 8002f8e:	eb1a 0508 	adds.w	r5, sl, r8
 8002f92:	eb4b 0609 	adc.w	r6, fp, r9
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	f04f 0400 	mov.w	r4, #0
 8002fa8:	0094      	lsls	r4, r2, #2
 8002faa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fae:	008b      	lsls	r3, r1, #2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4623      	mov	r3, r4
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	4631      	mov	r1, r6
 8002fb8:	f7fd f982 	bl	80002c0 <__aeabi_uldivmod>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	460c      	mov	r4, r1
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b50      	ldr	r3, [pc, #320]	; (8003104 <UART_SetConfig+0x6f4>)
 8002fc4:	fba3 2302 	umull	r2, r3, r3, r2
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	469b      	mov	fp, r3
 8002fd2:	f04f 0c00 	mov.w	ip, #0
 8002fd6:	46d9      	mov	r9, fp
 8002fd8:	46e2      	mov	sl, ip
 8002fda:	eb19 0309 	adds.w	r3, r9, r9
 8002fde:	eb4a 040a 	adc.w	r4, sl, sl
 8002fe2:	4699      	mov	r9, r3
 8002fe4:	46a2      	mov	sl, r4
 8002fe6:	eb19 090b 	adds.w	r9, r9, fp
 8002fea:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002fee:	f04f 0100 	mov.w	r1, #0
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ffa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ffe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003002:	4689      	mov	r9, r1
 8003004:	4692      	mov	sl, r2
 8003006:	eb1b 0509 	adds.w	r5, fp, r9
 800300a:	eb4c 060a 	adc.w	r6, ip, sl
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4619      	mov	r1, r3
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	f04f 0400 	mov.w	r4, #0
 8003020:	0094      	lsls	r4, r2, #2
 8003022:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003026:	008b      	lsls	r3, r1, #2
 8003028:	461a      	mov	r2, r3
 800302a:	4623      	mov	r3, r4
 800302c:	4628      	mov	r0, r5
 800302e:	4631      	mov	r1, r6
 8003030:	f7fd f946 	bl	80002c0 <__aeabi_uldivmod>
 8003034:	4603      	mov	r3, r0
 8003036:	460c      	mov	r4, r1
 8003038:	461a      	mov	r2, r3
 800303a:	4b32      	ldr	r3, [pc, #200]	; (8003104 <UART_SetConfig+0x6f4>)
 800303c:	fba3 1302 	umull	r1, r3, r3, r2
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	2164      	movs	r1, #100	; 0x64
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	3332      	adds	r3, #50	; 0x32
 800304e:	4a2d      	ldr	r2, [pc, #180]	; (8003104 <UART_SetConfig+0x6f4>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800305a:	4498      	add	r8, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	469b      	mov	fp, r3
 8003060:	f04f 0c00 	mov.w	ip, #0
 8003064:	46d9      	mov	r9, fp
 8003066:	46e2      	mov	sl, ip
 8003068:	eb19 0309 	adds.w	r3, r9, r9
 800306c:	eb4a 040a 	adc.w	r4, sl, sl
 8003070:	4699      	mov	r9, r3
 8003072:	46a2      	mov	sl, r4
 8003074:	eb19 090b 	adds.w	r9, r9, fp
 8003078:	eb4a 0a0c 	adc.w	sl, sl, ip
 800307c:	f04f 0100 	mov.w	r1, #0
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003088:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800308c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003090:	4689      	mov	r9, r1
 8003092:	4692      	mov	sl, r2
 8003094:	eb1b 0509 	adds.w	r5, fp, r9
 8003098:	eb4c 060a 	adc.w	r6, ip, sl
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4619      	mov	r1, r3
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	f04f 0400 	mov.w	r4, #0
 80030ae:	0094      	lsls	r4, r2, #2
 80030b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030b4:	008b      	lsls	r3, r1, #2
 80030b6:	461a      	mov	r2, r3
 80030b8:	4623      	mov	r3, r4
 80030ba:	4628      	mov	r0, r5
 80030bc:	4631      	mov	r1, r6
 80030be:	f7fd f8ff 	bl	80002c0 <__aeabi_uldivmod>
 80030c2:	4603      	mov	r3, r0
 80030c4:	460c      	mov	r4, r1
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <UART_SetConfig+0x6f4>)
 80030ca:	fba3 1302 	umull	r1, r3, r3, r2
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	2164      	movs	r1, #100	; 0x64
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	3332      	adds	r3, #50	; 0x32
 80030dc:	4a09      	ldr	r2, [pc, #36]	; (8003104 <UART_SetConfig+0x6f4>)
 80030de:	fba2 2303 	umull	r2, r3, r2, r3
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	f003 020f 	and.w	r2, r3, #15
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4442      	add	r2, r8
 80030ee:	609a      	str	r2, [r3, #8]
}
 80030f0:	e7ff      	b.n	80030f2 <UART_SetConfig+0x6e2>
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030fc:	40011000 	.word	0x40011000
 8003100:	40011400 	.word	0x40011400
 8003104:	51eb851f 	.word	0x51eb851f

08003108 <foo>:
 *      Author: Gavin
 */

#include "TCS34725.h"

RetVal foo(I2C_HandleTypeDef handle) {
 8003108:	b084      	sub	sp, #16
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af02      	add	r7, sp, #8
 8003110:	f107 0c18 	add.w	ip, r7, #24
 8003114:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t buffer[5];

	RetVal ret_val;

	buffer[0] = (CMD_CODE | ID_REG);
 8003118:	2392      	movs	r3, #146	; 0x92
 800311a:	713b      	strb	r3, [r7, #4]

	// Send I2C Write
	ret_val.status = HAL_I2C_Master_Transmit(&handle, ((uint16_t)TCS_ADDR) << 1, buffer, 1, HAL_MAX_DELAY);
 800311c:	1d3a      	adds	r2, r7, #4
 800311e:	f04f 33ff 	mov.w	r3, #4294967295
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2301      	movs	r3, #1
 8003126:	2152      	movs	r1, #82	; 0x52
 8003128:	f107 0018 	add.w	r0, r7, #24
 800312c:	f7fd fe86 	bl	8000e3c <HAL_I2C_Master_Transmit>
 8003130:	4603      	mov	r3, r0
 8003132:	703b      	strb	r3, [r7, #0]
	if (ret_val.status != HAL_OK) {
 8003134:	783b      	ldrb	r3, [r7, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <foo+0x38>
		return ret_val;
 800313a:	883b      	ldrh	r3, [r7, #0]
 800313c:	81bb      	strh	r3, [r7, #12]
 800313e:	e015      	b.n	800316c <foo+0x64>
	} else {

		// Send I2C Read
		ret_val.status = HAL_I2C_Master_Receive(&handle, ((uint16_t)TCS_ADDR) << 1, buffer, 1, HAL_MAX_DELAY);
 8003140:	1d3a      	adds	r2, r7, #4
 8003142:	f04f 33ff 	mov.w	r3, #4294967295
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	2301      	movs	r3, #1
 800314a:	2152      	movs	r1, #82	; 0x52
 800314c:	f107 0018 	add.w	r0, r7, #24
 8003150:	f7fd ff72 	bl	8001038 <HAL_I2C_Master_Receive>
 8003154:	4603      	mov	r3, r0
 8003156:	703b      	strb	r3, [r7, #0]
		if (ret_val.status != HAL_OK) {
 8003158:	783b      	ldrb	r3, [r7, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <foo+0x5c>
			return ret_val;
 800315e:	883b      	ldrh	r3, [r7, #0]
 8003160:	81bb      	strh	r3, [r7, #12]
 8003162:	e003      	b.n	800316c <foo+0x64>
		} else {
			ret_val.value = (uint8_t)buffer[0];
 8003164:	793b      	ldrb	r3, [r7, #4]
 8003166:	707b      	strb	r3, [r7, #1]
		}
	}
	return ret_val;
 8003168:	883b      	ldrh	r3, [r7, #0]
 800316a:	81bb      	strh	r3, [r7, #12]
 800316c:	2300      	movs	r3, #0
 800316e:	7b3a      	ldrb	r2, [r7, #12]
 8003170:	f362 0307 	bfi	r3, r2, #0, #8
 8003174:	7b7a      	ldrb	r2, [r7, #13]
 8003176:	f362 230f 	bfi	r3, r2, #8, #8
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003184:	b004      	add	sp, #16
 8003186:	4770      	bx	lr

08003188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b095      	sub	sp, #84	; 0x54
 800318c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800318e:	f7fd fa17 	bl	80005c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003192:	f000 f849 	bl	8003228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003196:	f000 f95b 	bl	8003450 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800319a:	f000 f92f 	bl	80033fc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800319e:	f000 f8af 	bl	8003300 <MX_I2C1_Init>
  MX_TIM1_Init();
 80031a2:	f000 f8db 	bl	800335c <MX_TIM1_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	//transmit_uart("Init");

  	HAL_Delay(1000);
 80031a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031aa:	f7fd fa7b 	bl	80006a4 <HAL_Delay>
  	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80031ae:	2201      	movs	r2, #1
 80031b0:	2120      	movs	r1, #32
 80031b2:	4819      	ldr	r0, [pc, #100]	; (8003218 <main+0x90>)
 80031b4:	f7fd fcf0 	bl	8000b98 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(Timer_Pin_GPIO_Port, Timer_Pin_Pin, GPIO_PIN_SET);
 80031b8:	2201      	movs	r2, #1
 80031ba:	2102      	movs	r1, #2
 80031bc:	4816      	ldr	r0, [pc, #88]	; (8003218 <main+0x90>)
 80031be:	f7fd fceb 	bl	8000b98 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 80031c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031c6:	f7fd fa6d 	bl	80006a4 <HAL_Delay>
  	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2120      	movs	r1, #32
 80031ce:	4812      	ldr	r0, [pc, #72]	; (8003218 <main+0x90>)
 80031d0:	f7fd fce2 	bl	8000b98 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(Timer_Pin_GPIO_Port, Timer_Pin_Pin, GPIO_PIN_RESET);
 80031d4:	2200      	movs	r2, #0
 80031d6:	2102      	movs	r1, #2
 80031d8:	480f      	ldr	r0, [pc, #60]	; (8003218 <main+0x90>)
 80031da:	f7fd fcdd 	bl	8000b98 <HAL_GPIO_WritePin>

  	// Check status
  	val = foo(hi2c1);
 80031de:	4c0f      	ldr	r4, [pc, #60]	; (800321c <main+0x94>)
 80031e0:	4668      	mov	r0, sp
 80031e2:	f104 0310 	add.w	r3, r4, #16
 80031e6:	2244      	movs	r2, #68	; 0x44
 80031e8:	4619      	mov	r1, r3
 80031ea:	f000 fb75 	bl	80038d8 <memcpy>
 80031ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80031f2:	f7ff ff89 	bl	8003108 <foo>
 80031f6:	4603      	mov	r3, r0
 80031f8:	80bb      	strh	r3, [r7, #4]
  	if (val.status != HAL_OK) {
 80031fa:	793b      	ldrb	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <main+0x80>
  		transmit_uart("Error \r\n");
 8003200:	4807      	ldr	r0, [pc, #28]	; (8003220 <main+0x98>)
 8003202:	f000 f995 	bl	8003530 <transmit_uart>
 8003206:	e7ce      	b.n	80031a6 <main+0x1e>
  	} else {
			int2uart(val.value);
 8003208:	797b      	ldrb	r3, [r7, #5]
 800320a:	4618      	mov	r0, r3
 800320c:	f000 f9a6 	bl	800355c <int2uart>
  		transmit_uart("\r\n");
 8003210:	4804      	ldr	r0, [pc, #16]	; (8003224 <main+0x9c>)
 8003212:	f000 f98d 	bl	8003530 <transmit_uart>
  	HAL_Delay(1000);
 8003216:	e7c6      	b.n	80031a6 <main+0x1e>
 8003218:	40020000 	.word	0x40020000
 800321c:	2000009c 	.word	0x2000009c
 8003220:	08004110 	.word	0x08004110
 8003224:	0800411c 	.word	0x0800411c

08003228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b094      	sub	sp, #80	; 0x50
 800322c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800322e:	f107 031c 	add.w	r3, r7, #28
 8003232:	2234      	movs	r2, #52	; 0x34
 8003234:	2100      	movs	r1, #0
 8003236:	4618      	mov	r0, r3
 8003238:	f000 fb59 	bl	80038ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800323c:	f107 0308 	add.w	r3, r7, #8
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800324c:	2300      	movs	r3, #0
 800324e:	607b      	str	r3, [r7, #4]
 8003250:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <SystemClock_Config+0xd0>)
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	4a28      	ldr	r2, [pc, #160]	; (80032f8 <SystemClock_Config+0xd0>)
 8003256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325a:	6413      	str	r3, [r2, #64]	; 0x40
 800325c:	4b26      	ldr	r3, [pc, #152]	; (80032f8 <SystemClock_Config+0xd0>)
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003264:	607b      	str	r3, [r7, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003268:	2300      	movs	r3, #0
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	4b23      	ldr	r3, [pc, #140]	; (80032fc <SystemClock_Config+0xd4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a22      	ldr	r2, [pc, #136]	; (80032fc <SystemClock_Config+0xd4>)
 8003272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	4b20      	ldr	r3, [pc, #128]	; (80032fc <SystemClock_Config+0xd4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003284:	2302      	movs	r3, #2
 8003286:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003288:	2301      	movs	r3, #1
 800328a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800328c:	2310      	movs	r3, #16
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003290:	2302      	movs	r3, #2
 8003292:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003294:	2300      	movs	r3, #0
 8003296:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003298:	2310      	movs	r3, #16
 800329a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800329c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80032a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80032a2:	2304      	movs	r3, #4
 80032a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80032a6:	2304      	movs	r3, #4
 80032a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80032aa:	2302      	movs	r3, #2
 80032ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032ae:	f107 031c 	add.w	r3, r7, #28
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe fe06 	bl	8001ec4 <HAL_RCC_OscConfig>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80032be:	f000 f965 	bl	800358c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032c2:	230f      	movs	r3, #15
 80032c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032c6:	2302      	movs	r3, #2
 80032c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80032d8:	f107 0308 	add.w	r3, r7, #8
 80032dc:	2102      	movs	r1, #2
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe fbfe 	bl	8001ae0 <HAL_RCC_ClockConfig>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80032ea:	f000 f94f 	bl	800358c <Error_Handler>
  }
}
 80032ee:	bf00      	nop
 80032f0:	3750      	adds	r7, #80	; 0x50
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40007000 	.word	0x40007000

08003300 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003304:	4b12      	ldr	r3, [pc, #72]	; (8003350 <MX_I2C1_Init+0x50>)
 8003306:	4a13      	ldr	r2, [pc, #76]	; (8003354 <MX_I2C1_Init+0x54>)
 8003308:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800330a:	4b11      	ldr	r3, [pc, #68]	; (8003350 <MX_I2C1_Init+0x50>)
 800330c:	4a12      	ldr	r2, [pc, #72]	; (8003358 <MX_I2C1_Init+0x58>)
 800330e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <MX_I2C1_Init+0x50>)
 8003312:	2200      	movs	r2, #0
 8003314:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003316:	4b0e      	ldr	r3, [pc, #56]	; (8003350 <MX_I2C1_Init+0x50>)
 8003318:	2200      	movs	r2, #0
 800331a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800331c:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <MX_I2C1_Init+0x50>)
 800331e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003322:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003324:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <MX_I2C1_Init+0x50>)
 8003326:	2200      	movs	r2, #0
 8003328:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800332a:	4b09      	ldr	r3, [pc, #36]	; (8003350 <MX_I2C1_Init+0x50>)
 800332c:	2200      	movs	r2, #0
 800332e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003330:	4b07      	ldr	r3, [pc, #28]	; (8003350 <MX_I2C1_Init+0x50>)
 8003332:	2200      	movs	r2, #0
 8003334:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <MX_I2C1_Init+0x50>)
 8003338:	2200      	movs	r2, #0
 800333a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800333c:	4804      	ldr	r0, [pc, #16]	; (8003350 <MX_I2C1_Init+0x50>)
 800333e:	f7fd fc45 	bl	8000bcc <HAL_I2C_Init>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003348:	f000 f920 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800334c:	bf00      	nop
 800334e:	bd80      	pop	{r7, pc}
 8003350:	2000009c 	.word	0x2000009c
 8003354:	40005400 	.word	0x40005400
 8003358:	00061a80 	.word	0x00061a80

0800335c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003362:	f107 0308 	add.w	r3, r7, #8
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	609a      	str	r2, [r3, #8]
 800336e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003370:	463b      	mov	r3, r7
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003378:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <MX_TIM1_Init+0x98>)
 800337a:	4a1f      	ldr	r2, [pc, #124]	; (80033f8 <MX_TIM1_Init+0x9c>)
 800337c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800337e:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <MX_TIM1_Init+0x98>)
 8003380:	2253      	movs	r2, #83	; 0x53
 8003382:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003384:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <MX_TIM1_Init+0x98>)
 8003386:	2200      	movs	r2, #0
 8003388:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xfffe;
 800338a:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <MX_TIM1_Init+0x98>)
 800338c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003390:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003392:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <MX_TIM1_Init+0x98>)
 8003394:	2200      	movs	r2, #0
 8003396:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003398:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <MX_TIM1_Init+0x98>)
 800339a:	2200      	movs	r2, #0
 800339c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800339e:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <MX_TIM1_Init+0x98>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80033a4:	4813      	ldr	r0, [pc, #76]	; (80033f4 <MX_TIM1_Init+0x98>)
 80033a6:	f7fe ffcf 	bl	8002348 <HAL_TIM_Base_Init>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80033b0:	f000 f8ec 	bl	800358c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80033ba:	f107 0308 	add.w	r3, r7, #8
 80033be:	4619      	mov	r1, r3
 80033c0:	480c      	ldr	r0, [pc, #48]	; (80033f4 <MX_TIM1_Init+0x98>)
 80033c2:	f7fe ffec 	bl	800239e <HAL_TIM_ConfigClockSource>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80033cc:	f000 f8de 	bl	800358c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033d0:	2300      	movs	r3, #0
 80033d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033d8:	463b      	mov	r3, r7
 80033da:	4619      	mov	r1, r3
 80033dc:	4805      	ldr	r0, [pc, #20]	; (80033f4 <MX_TIM1_Init+0x98>)
 80033de:	f7ff f98d 	bl	80026fc <HAL_TIMEx_MasterConfigSynchronization>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80033e8:	f000 f8d0 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80033ec:	bf00      	nop
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	200000f0 	.word	0x200000f0
 80033f8:	40010000 	.word	0x40010000

080033fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <MX_USART2_UART_Init+0x4c>)
 8003402:	4a12      	ldr	r2, [pc, #72]	; (800344c <MX_USART2_UART_Init+0x50>)
 8003404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003406:	4b10      	ldr	r3, [pc, #64]	; (8003448 <MX_USART2_UART_Init+0x4c>)
 8003408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800340c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800340e:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <MX_USART2_UART_Init+0x4c>)
 8003410:	2200      	movs	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <MX_USART2_UART_Init+0x4c>)
 8003416:	2200      	movs	r2, #0
 8003418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <MX_USART2_UART_Init+0x4c>)
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003420:	4b09      	ldr	r3, [pc, #36]	; (8003448 <MX_USART2_UART_Init+0x4c>)
 8003422:	220c      	movs	r2, #12
 8003424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <MX_USART2_UART_Init+0x4c>)
 8003428:	2200      	movs	r2, #0
 800342a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <MX_USART2_UART_Init+0x4c>)
 800342e:	2200      	movs	r2, #0
 8003430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003432:	4805      	ldr	r0, [pc, #20]	; (8003448 <MX_USART2_UART_Init+0x4c>)
 8003434:	f7ff f9bc 	bl	80027b0 <HAL_UART_Init>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800343e:	f000 f8a5 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000130 	.word	0x20000130
 800344c:	40004400 	.word	0x40004400

08003450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003456:	f107 0314 	add.w	r3, r7, #20
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	605a      	str	r2, [r3, #4]
 8003460:	609a      	str	r2, [r3, #8]
 8003462:	60da      	str	r2, [r3, #12]
 8003464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	4b2d      	ldr	r3, [pc, #180]	; (8003520 <MX_GPIO_Init+0xd0>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	4a2c      	ldr	r2, [pc, #176]	; (8003520 <MX_GPIO_Init+0xd0>)
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	6313      	str	r3, [r2, #48]	; 0x30
 8003476:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <MX_GPIO_Init+0xd0>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	4b26      	ldr	r3, [pc, #152]	; (8003520 <MX_GPIO_Init+0xd0>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	4a25      	ldr	r2, [pc, #148]	; (8003520 <MX_GPIO_Init+0xd0>)
 800348c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003490:	6313      	str	r3, [r2, #48]	; 0x30
 8003492:	4b23      	ldr	r3, [pc, #140]	; (8003520 <MX_GPIO_Init+0xd0>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <MX_GPIO_Init+0xd0>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <MX_GPIO_Init+0xd0>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	6313      	str	r3, [r2, #48]	; 0x30
 80034ae:	4b1c      	ldr	r3, [pc, #112]	; (8003520 <MX_GPIO_Init+0xd0>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	607b      	str	r3, [r7, #4]
 80034be:	4b18      	ldr	r3, [pc, #96]	; (8003520 <MX_GPIO_Init+0xd0>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	4a17      	ldr	r2, [pc, #92]	; (8003520 <MX_GPIO_Init+0xd0>)
 80034c4:	f043 0302 	orr.w	r3, r3, #2
 80034c8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ca:	4b15      	ldr	r3, [pc, #84]	; (8003520 <MX_GPIO_Init+0xd0>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	607b      	str	r3, [r7, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Timer_Pin_Pin|LD2_Pin, GPIO_PIN_RESET);
 80034d6:	2200      	movs	r2, #0
 80034d8:	2122      	movs	r1, #34	; 0x22
 80034da:	4812      	ldr	r0, [pc, #72]	; (8003524 <MX_GPIO_Init+0xd4>)
 80034dc:	f7fd fb5c 	bl	8000b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80034e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034e6:	4b10      	ldr	r3, [pc, #64]	; (8003528 <MX_GPIO_Init+0xd8>)
 80034e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80034ee:	f107 0314 	add.w	r3, r7, #20
 80034f2:	4619      	mov	r1, r3
 80034f4:	480d      	ldr	r0, [pc, #52]	; (800352c <MX_GPIO_Init+0xdc>)
 80034f6:	f7fd f9dd 	bl	80008b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Timer_Pin_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Timer_Pin_Pin|LD2_Pin;
 80034fa:	2322      	movs	r3, #34	; 0x22
 80034fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034fe:	2301      	movs	r3, #1
 8003500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003506:	2300      	movs	r3, #0
 8003508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350a:	f107 0314 	add.w	r3, r7, #20
 800350e:	4619      	mov	r1, r3
 8003510:	4804      	ldr	r0, [pc, #16]	; (8003524 <MX_GPIO_Init+0xd4>)
 8003512:	f7fd f9cf 	bl	80008b4 <HAL_GPIO_Init>

}
 8003516:	bf00      	nop
 8003518:	3728      	adds	r7, #40	; 0x28
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40023800 	.word	0x40023800
 8003524:	40020000 	.word	0x40020000
 8003528:	10210000 	.word	0x10210000
 800352c:	40020800 	.word	0x40020800

08003530 <transmit_uart>:

/* USER CODE BEGIN 4 */
void transmit_uart(char *string){
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7fc fe69 	bl	8000210 <strlen>
 800353e:	4603      	mov	r3, r0
 8003540:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 200);
 8003542:	7bfb      	ldrb	r3, [r7, #15]
 8003544:	b29a      	uxth	r2, r3
 8003546:	23c8      	movs	r3, #200	; 0xc8
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4803      	ldr	r0, [pc, #12]	; (8003558 <transmit_uart+0x28>)
 800354c:	f7ff f97d 	bl	800284a <HAL_UART_Transmit>
}
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20000130 	.word	0x20000130

0800355c <int2uart>:


void int2uart(uint8_t input){
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
	char text[20];
	sprintf(text, "%d", input);
 8003566:	79fa      	ldrb	r2, [r7, #7]
 8003568:	f107 0308 	add.w	r3, r7, #8
 800356c:	4906      	ldr	r1, [pc, #24]	; (8003588 <int2uart+0x2c>)
 800356e:	4618      	mov	r0, r3
 8003570:	f000 f9c6 	bl	8003900 <siprintf>
	char *p = text;
 8003574:	f107 0308 	add.w	r3, r7, #8
 8003578:	61fb      	str	r3, [r7, #28]
	transmit_uart(p);
 800357a:	69f8      	ldr	r0, [r7, #28]
 800357c:	f7ff ffd8 	bl	8003530 <transmit_uart>
	//transmit_uart("\r\n");
}
 8003580:	bf00      	nop
 8003582:	3720      	adds	r7, #32
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	08004120 	.word	0x08004120

0800358c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <HAL_MspInit+0x4c>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	4a0f      	ldr	r2, [pc, #60]	; (80035e8 <HAL_MspInit+0x4c>)
 80035ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b0:	6453      	str	r3, [r2, #68]	; 0x44
 80035b2:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <HAL_MspInit+0x4c>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ba:	607b      	str	r3, [r7, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <HAL_MspInit+0x4c>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	4a08      	ldr	r2, [pc, #32]	; (80035e8 <HAL_MspInit+0x4c>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035cc:	6413      	str	r3, [r2, #64]	; 0x40
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_MspInit+0x4c>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80035da:	2007      	movs	r0, #7
 80035dc:	f7fd f936 	bl	800084c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40023800 	.word	0x40023800

080035ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	; 0x28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	60da      	str	r2, [r3, #12]
 8003602:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a19      	ldr	r2, [pc, #100]	; (8003670 <HAL_I2C_MspInit+0x84>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d12b      	bne.n	8003666 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	4b18      	ldr	r3, [pc, #96]	; (8003674 <HAL_I2C_MspInit+0x88>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	4a17      	ldr	r2, [pc, #92]	; (8003674 <HAL_I2C_MspInit+0x88>)
 8003618:	f043 0302 	orr.w	r3, r3, #2
 800361c:	6313      	str	r3, [r2, #48]	; 0x30
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_I2C_MspInit+0x88>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800362a:	23c0      	movs	r3, #192	; 0xc0
 800362c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800362e:	2312      	movs	r3, #18
 8003630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003632:	2301      	movs	r3, #1
 8003634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003636:	2303      	movs	r3, #3
 8003638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800363a:	2304      	movs	r3, #4
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800363e:	f107 0314 	add.w	r3, r7, #20
 8003642:	4619      	mov	r1, r3
 8003644:	480c      	ldr	r0, [pc, #48]	; (8003678 <HAL_I2C_MspInit+0x8c>)
 8003646:	f7fd f935 	bl	80008b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_I2C_MspInit+0x88>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	4a08      	ldr	r2, [pc, #32]	; (8003674 <HAL_I2C_MspInit+0x88>)
 8003654:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003658:	6413      	str	r3, [r2, #64]	; 0x40
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_I2C_MspInit+0x88>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
    //HAL_Delay(2);
    //__HAL_RCC_I2C1_RELEASE_RESET();
  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003666:	bf00      	nop
 8003668:	3728      	adds	r7, #40	; 0x28
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40005400 	.word	0x40005400
 8003674:	40023800 	.word	0x40023800
 8003678:	40020400 	.word	0x40020400

0800367c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a0b      	ldr	r2, [pc, #44]	; (80036b8 <HAL_TIM_Base_MspInit+0x3c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d10d      	bne.n	80036aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <HAL_TIM_Base_MspInit+0x40>)
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	4a09      	ldr	r2, [pc, #36]	; (80036bc <HAL_TIM_Base_MspInit+0x40>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6453      	str	r3, [r2, #68]	; 0x44
 800369e:	4b07      	ldr	r3, [pc, #28]	; (80036bc <HAL_TIM_Base_MspInit+0x40>)
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40010000 	.word	0x40010000
 80036bc:	40023800 	.word	0x40023800

080036c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c8:	f107 0314 	add.w	r3, r7, #20
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a19      	ldr	r2, [pc, #100]	; (8003744 <HAL_UART_MspInit+0x84>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d12b      	bne.n	800373a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	4b18      	ldr	r3, [pc, #96]	; (8003748 <HAL_UART_MspInit+0x88>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	4a17      	ldr	r2, [pc, #92]	; (8003748 <HAL_UART_MspInit+0x88>)
 80036ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f0:	6413      	str	r3, [r2, #64]	; 0x40
 80036f2:	4b15      	ldr	r3, [pc, #84]	; (8003748 <HAL_UART_MspInit+0x88>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <HAL_UART_MspInit+0x88>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	4a10      	ldr	r2, [pc, #64]	; (8003748 <HAL_UART_MspInit+0x88>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	6313      	str	r3, [r2, #48]	; 0x30
 800370e:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <HAL_UART_MspInit+0x88>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800371a:	230c      	movs	r3, #12
 800371c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371e:	2302      	movs	r3, #2
 8003720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003726:	2303      	movs	r3, #3
 8003728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800372a:	2307      	movs	r3, #7
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800372e:	f107 0314 	add.w	r3, r7, #20
 8003732:	4619      	mov	r1, r3
 8003734:	4805      	ldr	r0, [pc, #20]	; (800374c <HAL_UART_MspInit+0x8c>)
 8003736:	f7fd f8bd 	bl	80008b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800373a:	bf00      	nop
 800373c:	3728      	adds	r7, #40	; 0x28
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40004400 	.word	0x40004400
 8003748:	40023800 	.word	0x40023800
 800374c:	40020000 	.word	0x40020000

08003750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003754:	bf00      	nop
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800375e:	b480      	push	{r7}
 8003760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003762:	e7fe      	b.n	8003762 <HardFault_Handler+0x4>

08003764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003768:	e7fe      	b.n	8003768 <MemManage_Handler+0x4>

0800376a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800376e:	e7fe      	b.n	800376e <BusFault_Handler+0x4>

08003770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003774:	e7fe      	b.n	8003774 <UsageFault_Handler+0x4>

08003776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003776:	b480      	push	{r7}
 8003778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003792:	b480      	push	{r7}
 8003794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037a4:	f7fc ff5e 	bl	8000664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037a8:	bf00      	nop
 80037aa:	bd80      	pop	{r7, pc}

080037ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <_sbrk+0x50>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d102      	bne.n	80037c2 <_sbrk+0x16>
		heap_end = &end;
 80037bc:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <_sbrk+0x50>)
 80037be:	4a10      	ldr	r2, [pc, #64]	; (8003800 <_sbrk+0x54>)
 80037c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80037c2:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <_sbrk+0x50>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <_sbrk+0x50>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4413      	add	r3, r2
 80037d0:	466a      	mov	r2, sp
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d907      	bls.n	80037e6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80037d6:	f000 f855 	bl	8003884 <__errno>
 80037da:	4602      	mov	r2, r0
 80037dc:	230c      	movs	r3, #12
 80037de:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80037e0:	f04f 33ff 	mov.w	r3, #4294967295
 80037e4:	e006      	b.n	80037f4 <_sbrk+0x48>
	}

	heap_end += incr;
 80037e6:	4b05      	ldr	r3, [pc, #20]	; (80037fc <_sbrk+0x50>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	4a03      	ldr	r2, [pc, #12]	; (80037fc <_sbrk+0x50>)
 80037f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80037f2:	68fb      	ldr	r3, [r7, #12]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	2000008c 	.word	0x2000008c
 8003800:	20000178 	.word	0x20000178

08003804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003808:	4b08      	ldr	r3, [pc, #32]	; (800382c <SystemInit+0x28>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	4a07      	ldr	r2, [pc, #28]	; (800382c <SystemInit+0x28>)
 8003810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <SystemInit+0x28>)
 800381a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800381e:	609a      	str	r2, [r3, #8]
#endif
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003868 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003834:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003836:	e003      	b.n	8003840 <LoopCopyDataInit>

08003838 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003838:	4b0c      	ldr	r3, [pc, #48]	; (800386c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800383a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800383c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800383e:	3104      	adds	r1, #4

08003840 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003840:	480b      	ldr	r0, [pc, #44]	; (8003870 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003842:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003844:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003846:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003848:	d3f6      	bcc.n	8003838 <CopyDataInit>
  ldr  r2, =_sbss
 800384a:	4a0b      	ldr	r2, [pc, #44]	; (8003878 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800384c:	e002      	b.n	8003854 <LoopFillZerobss>

0800384e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800384e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003850:	f842 3b04 	str.w	r3, [r2], #4

08003854 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003854:	4b09      	ldr	r3, [pc, #36]	; (800387c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003856:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003858:	d3f9      	bcc.n	800384e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800385a:	f7ff ffd3 	bl	8003804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800385e:	f000 f817 	bl	8003890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003862:	f7ff fc91 	bl	8003188 <main>
  bx  lr    
 8003866:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003868:	20008000 	.word	0x20008000
  ldr  r3, =_sidata
 800386c:	08004180 	.word	0x08004180
  ldr  r0, =_sdata
 8003870:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003874:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003878:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800387c:	20000174 	.word	0x20000174

08003880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003880:	e7fe      	b.n	8003880 <ADC_IRQHandler>
	...

08003884 <__errno>:
 8003884:	4b01      	ldr	r3, [pc, #4]	; (800388c <__errno+0x8>)
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	2000000c 	.word	0x2000000c

08003890 <__libc_init_array>:
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	4e0d      	ldr	r6, [pc, #52]	; (80038c8 <__libc_init_array+0x38>)
 8003894:	4c0d      	ldr	r4, [pc, #52]	; (80038cc <__libc_init_array+0x3c>)
 8003896:	1ba4      	subs	r4, r4, r6
 8003898:	10a4      	asrs	r4, r4, #2
 800389a:	2500      	movs	r5, #0
 800389c:	42a5      	cmp	r5, r4
 800389e:	d109      	bne.n	80038b4 <__libc_init_array+0x24>
 80038a0:	4e0b      	ldr	r6, [pc, #44]	; (80038d0 <__libc_init_array+0x40>)
 80038a2:	4c0c      	ldr	r4, [pc, #48]	; (80038d4 <__libc_init_array+0x44>)
 80038a4:	f000 fc28 	bl	80040f8 <_init>
 80038a8:	1ba4      	subs	r4, r4, r6
 80038aa:	10a4      	asrs	r4, r4, #2
 80038ac:	2500      	movs	r5, #0
 80038ae:	42a5      	cmp	r5, r4
 80038b0:	d105      	bne.n	80038be <__libc_init_array+0x2e>
 80038b2:	bd70      	pop	{r4, r5, r6, pc}
 80038b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038b8:	4798      	blx	r3
 80038ba:	3501      	adds	r5, #1
 80038bc:	e7ee      	b.n	800389c <__libc_init_array+0xc>
 80038be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038c2:	4798      	blx	r3
 80038c4:	3501      	adds	r5, #1
 80038c6:	e7f2      	b.n	80038ae <__libc_init_array+0x1e>
 80038c8:	08004178 	.word	0x08004178
 80038cc:	08004178 	.word	0x08004178
 80038d0:	08004178 	.word	0x08004178
 80038d4:	0800417c 	.word	0x0800417c

080038d8 <memcpy>:
 80038d8:	b510      	push	{r4, lr}
 80038da:	1e43      	subs	r3, r0, #1
 80038dc:	440a      	add	r2, r1
 80038de:	4291      	cmp	r1, r2
 80038e0:	d100      	bne.n	80038e4 <memcpy+0xc>
 80038e2:	bd10      	pop	{r4, pc}
 80038e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038ec:	e7f7      	b.n	80038de <memcpy+0x6>

080038ee <memset>:
 80038ee:	4402      	add	r2, r0
 80038f0:	4603      	mov	r3, r0
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d100      	bne.n	80038f8 <memset+0xa>
 80038f6:	4770      	bx	lr
 80038f8:	f803 1b01 	strb.w	r1, [r3], #1
 80038fc:	e7f9      	b.n	80038f2 <memset+0x4>
	...

08003900 <siprintf>:
 8003900:	b40e      	push	{r1, r2, r3}
 8003902:	b500      	push	{lr}
 8003904:	b09c      	sub	sp, #112	; 0x70
 8003906:	ab1d      	add	r3, sp, #116	; 0x74
 8003908:	9002      	str	r0, [sp, #8]
 800390a:	9006      	str	r0, [sp, #24]
 800390c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003910:	4809      	ldr	r0, [pc, #36]	; (8003938 <siprintf+0x38>)
 8003912:	9107      	str	r1, [sp, #28]
 8003914:	9104      	str	r1, [sp, #16]
 8003916:	4909      	ldr	r1, [pc, #36]	; (800393c <siprintf+0x3c>)
 8003918:	f853 2b04 	ldr.w	r2, [r3], #4
 800391c:	9105      	str	r1, [sp, #20]
 800391e:	6800      	ldr	r0, [r0, #0]
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	a902      	add	r1, sp, #8
 8003924:	f000 f866 	bl	80039f4 <_svfiprintf_r>
 8003928:	9b02      	ldr	r3, [sp, #8]
 800392a:	2200      	movs	r2, #0
 800392c:	701a      	strb	r2, [r3, #0]
 800392e:	b01c      	add	sp, #112	; 0x70
 8003930:	f85d eb04 	ldr.w	lr, [sp], #4
 8003934:	b003      	add	sp, #12
 8003936:	4770      	bx	lr
 8003938:	2000000c 	.word	0x2000000c
 800393c:	ffff0208 	.word	0xffff0208

08003940 <__ssputs_r>:
 8003940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003944:	688e      	ldr	r6, [r1, #8]
 8003946:	429e      	cmp	r6, r3
 8003948:	4682      	mov	sl, r0
 800394a:	460c      	mov	r4, r1
 800394c:	4690      	mov	r8, r2
 800394e:	4699      	mov	r9, r3
 8003950:	d837      	bhi.n	80039c2 <__ssputs_r+0x82>
 8003952:	898a      	ldrh	r2, [r1, #12]
 8003954:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003958:	d031      	beq.n	80039be <__ssputs_r+0x7e>
 800395a:	6825      	ldr	r5, [r4, #0]
 800395c:	6909      	ldr	r1, [r1, #16]
 800395e:	1a6f      	subs	r7, r5, r1
 8003960:	6965      	ldr	r5, [r4, #20]
 8003962:	2302      	movs	r3, #2
 8003964:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003968:	fb95 f5f3 	sdiv	r5, r5, r3
 800396c:	f109 0301 	add.w	r3, r9, #1
 8003970:	443b      	add	r3, r7
 8003972:	429d      	cmp	r5, r3
 8003974:	bf38      	it	cc
 8003976:	461d      	movcc	r5, r3
 8003978:	0553      	lsls	r3, r2, #21
 800397a:	d530      	bpl.n	80039de <__ssputs_r+0x9e>
 800397c:	4629      	mov	r1, r5
 800397e:	f000 fb21 	bl	8003fc4 <_malloc_r>
 8003982:	4606      	mov	r6, r0
 8003984:	b950      	cbnz	r0, 800399c <__ssputs_r+0x5c>
 8003986:	230c      	movs	r3, #12
 8003988:	f8ca 3000 	str.w	r3, [sl]
 800398c:	89a3      	ldrh	r3, [r4, #12]
 800398e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003992:	81a3      	strh	r3, [r4, #12]
 8003994:	f04f 30ff 	mov.w	r0, #4294967295
 8003998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800399c:	463a      	mov	r2, r7
 800399e:	6921      	ldr	r1, [r4, #16]
 80039a0:	f7ff ff9a 	bl	80038d8 <memcpy>
 80039a4:	89a3      	ldrh	r3, [r4, #12]
 80039a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ae:	81a3      	strh	r3, [r4, #12]
 80039b0:	6126      	str	r6, [r4, #16]
 80039b2:	6165      	str	r5, [r4, #20]
 80039b4:	443e      	add	r6, r7
 80039b6:	1bed      	subs	r5, r5, r7
 80039b8:	6026      	str	r6, [r4, #0]
 80039ba:	60a5      	str	r5, [r4, #8]
 80039bc:	464e      	mov	r6, r9
 80039be:	454e      	cmp	r6, r9
 80039c0:	d900      	bls.n	80039c4 <__ssputs_r+0x84>
 80039c2:	464e      	mov	r6, r9
 80039c4:	4632      	mov	r2, r6
 80039c6:	4641      	mov	r1, r8
 80039c8:	6820      	ldr	r0, [r4, #0]
 80039ca:	f000 fa93 	bl	8003ef4 <memmove>
 80039ce:	68a3      	ldr	r3, [r4, #8]
 80039d0:	1b9b      	subs	r3, r3, r6
 80039d2:	60a3      	str	r3, [r4, #8]
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	441e      	add	r6, r3
 80039d8:	6026      	str	r6, [r4, #0]
 80039da:	2000      	movs	r0, #0
 80039dc:	e7dc      	b.n	8003998 <__ssputs_r+0x58>
 80039de:	462a      	mov	r2, r5
 80039e0:	f000 fb4a 	bl	8004078 <_realloc_r>
 80039e4:	4606      	mov	r6, r0
 80039e6:	2800      	cmp	r0, #0
 80039e8:	d1e2      	bne.n	80039b0 <__ssputs_r+0x70>
 80039ea:	6921      	ldr	r1, [r4, #16]
 80039ec:	4650      	mov	r0, sl
 80039ee:	f000 fa9b 	bl	8003f28 <_free_r>
 80039f2:	e7c8      	b.n	8003986 <__ssputs_r+0x46>

080039f4 <_svfiprintf_r>:
 80039f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f8:	461d      	mov	r5, r3
 80039fa:	898b      	ldrh	r3, [r1, #12]
 80039fc:	061f      	lsls	r7, r3, #24
 80039fe:	b09d      	sub	sp, #116	; 0x74
 8003a00:	4680      	mov	r8, r0
 8003a02:	460c      	mov	r4, r1
 8003a04:	4616      	mov	r6, r2
 8003a06:	d50f      	bpl.n	8003a28 <_svfiprintf_r+0x34>
 8003a08:	690b      	ldr	r3, [r1, #16]
 8003a0a:	b96b      	cbnz	r3, 8003a28 <_svfiprintf_r+0x34>
 8003a0c:	2140      	movs	r1, #64	; 0x40
 8003a0e:	f000 fad9 	bl	8003fc4 <_malloc_r>
 8003a12:	6020      	str	r0, [r4, #0]
 8003a14:	6120      	str	r0, [r4, #16]
 8003a16:	b928      	cbnz	r0, 8003a24 <_svfiprintf_r+0x30>
 8003a18:	230c      	movs	r3, #12
 8003a1a:	f8c8 3000 	str.w	r3, [r8]
 8003a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a22:	e0c8      	b.n	8003bb6 <_svfiprintf_r+0x1c2>
 8003a24:	2340      	movs	r3, #64	; 0x40
 8003a26:	6163      	str	r3, [r4, #20]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a2c:	2320      	movs	r3, #32
 8003a2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a32:	2330      	movs	r3, #48	; 0x30
 8003a34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a38:	9503      	str	r5, [sp, #12]
 8003a3a:	f04f 0b01 	mov.w	fp, #1
 8003a3e:	4637      	mov	r7, r6
 8003a40:	463d      	mov	r5, r7
 8003a42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a46:	b10b      	cbz	r3, 8003a4c <_svfiprintf_r+0x58>
 8003a48:	2b25      	cmp	r3, #37	; 0x25
 8003a4a:	d13e      	bne.n	8003aca <_svfiprintf_r+0xd6>
 8003a4c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003a50:	d00b      	beq.n	8003a6a <_svfiprintf_r+0x76>
 8003a52:	4653      	mov	r3, sl
 8003a54:	4632      	mov	r2, r6
 8003a56:	4621      	mov	r1, r4
 8003a58:	4640      	mov	r0, r8
 8003a5a:	f7ff ff71 	bl	8003940 <__ssputs_r>
 8003a5e:	3001      	adds	r0, #1
 8003a60:	f000 80a4 	beq.w	8003bac <_svfiprintf_r+0x1b8>
 8003a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a66:	4453      	add	r3, sl
 8003a68:	9309      	str	r3, [sp, #36]	; 0x24
 8003a6a:	783b      	ldrb	r3, [r7, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 809d 	beq.w	8003bac <_svfiprintf_r+0x1b8>
 8003a72:	2300      	movs	r3, #0
 8003a74:	f04f 32ff 	mov.w	r2, #4294967295
 8003a78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a7c:	9304      	str	r3, [sp, #16]
 8003a7e:	9307      	str	r3, [sp, #28]
 8003a80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a84:	931a      	str	r3, [sp, #104]	; 0x68
 8003a86:	462f      	mov	r7, r5
 8003a88:	2205      	movs	r2, #5
 8003a8a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003a8e:	4850      	ldr	r0, [pc, #320]	; (8003bd0 <_svfiprintf_r+0x1dc>)
 8003a90:	f7fc fbc6 	bl	8000220 <memchr>
 8003a94:	9b04      	ldr	r3, [sp, #16]
 8003a96:	b9d0      	cbnz	r0, 8003ace <_svfiprintf_r+0xda>
 8003a98:	06d9      	lsls	r1, r3, #27
 8003a9a:	bf44      	itt	mi
 8003a9c:	2220      	movmi	r2, #32
 8003a9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003aa2:	071a      	lsls	r2, r3, #28
 8003aa4:	bf44      	itt	mi
 8003aa6:	222b      	movmi	r2, #43	; 0x2b
 8003aa8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003aac:	782a      	ldrb	r2, [r5, #0]
 8003aae:	2a2a      	cmp	r2, #42	; 0x2a
 8003ab0:	d015      	beq.n	8003ade <_svfiprintf_r+0xea>
 8003ab2:	9a07      	ldr	r2, [sp, #28]
 8003ab4:	462f      	mov	r7, r5
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	250a      	movs	r5, #10
 8003aba:	4639      	mov	r1, r7
 8003abc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ac0:	3b30      	subs	r3, #48	; 0x30
 8003ac2:	2b09      	cmp	r3, #9
 8003ac4:	d94d      	bls.n	8003b62 <_svfiprintf_r+0x16e>
 8003ac6:	b1b8      	cbz	r0, 8003af8 <_svfiprintf_r+0x104>
 8003ac8:	e00f      	b.n	8003aea <_svfiprintf_r+0xf6>
 8003aca:	462f      	mov	r7, r5
 8003acc:	e7b8      	b.n	8003a40 <_svfiprintf_r+0x4c>
 8003ace:	4a40      	ldr	r2, [pc, #256]	; (8003bd0 <_svfiprintf_r+0x1dc>)
 8003ad0:	1a80      	subs	r0, r0, r2
 8003ad2:	fa0b f000 	lsl.w	r0, fp, r0
 8003ad6:	4318      	orrs	r0, r3
 8003ad8:	9004      	str	r0, [sp, #16]
 8003ada:	463d      	mov	r5, r7
 8003adc:	e7d3      	b.n	8003a86 <_svfiprintf_r+0x92>
 8003ade:	9a03      	ldr	r2, [sp, #12]
 8003ae0:	1d11      	adds	r1, r2, #4
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	9103      	str	r1, [sp, #12]
 8003ae6:	2a00      	cmp	r2, #0
 8003ae8:	db01      	blt.n	8003aee <_svfiprintf_r+0xfa>
 8003aea:	9207      	str	r2, [sp, #28]
 8003aec:	e004      	b.n	8003af8 <_svfiprintf_r+0x104>
 8003aee:	4252      	negs	r2, r2
 8003af0:	f043 0302 	orr.w	r3, r3, #2
 8003af4:	9207      	str	r2, [sp, #28]
 8003af6:	9304      	str	r3, [sp, #16]
 8003af8:	783b      	ldrb	r3, [r7, #0]
 8003afa:	2b2e      	cmp	r3, #46	; 0x2e
 8003afc:	d10c      	bne.n	8003b18 <_svfiprintf_r+0x124>
 8003afe:	787b      	ldrb	r3, [r7, #1]
 8003b00:	2b2a      	cmp	r3, #42	; 0x2a
 8003b02:	d133      	bne.n	8003b6c <_svfiprintf_r+0x178>
 8003b04:	9b03      	ldr	r3, [sp, #12]
 8003b06:	1d1a      	adds	r2, r3, #4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	9203      	str	r2, [sp, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bfb8      	it	lt
 8003b10:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b14:	3702      	adds	r7, #2
 8003b16:	9305      	str	r3, [sp, #20]
 8003b18:	4d2e      	ldr	r5, [pc, #184]	; (8003bd4 <_svfiprintf_r+0x1e0>)
 8003b1a:	7839      	ldrb	r1, [r7, #0]
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	4628      	mov	r0, r5
 8003b20:	f7fc fb7e 	bl	8000220 <memchr>
 8003b24:	b138      	cbz	r0, 8003b36 <_svfiprintf_r+0x142>
 8003b26:	2340      	movs	r3, #64	; 0x40
 8003b28:	1b40      	subs	r0, r0, r5
 8003b2a:	fa03 f000 	lsl.w	r0, r3, r0
 8003b2e:	9b04      	ldr	r3, [sp, #16]
 8003b30:	4303      	orrs	r3, r0
 8003b32:	3701      	adds	r7, #1
 8003b34:	9304      	str	r3, [sp, #16]
 8003b36:	7839      	ldrb	r1, [r7, #0]
 8003b38:	4827      	ldr	r0, [pc, #156]	; (8003bd8 <_svfiprintf_r+0x1e4>)
 8003b3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b3e:	2206      	movs	r2, #6
 8003b40:	1c7e      	adds	r6, r7, #1
 8003b42:	f7fc fb6d 	bl	8000220 <memchr>
 8003b46:	2800      	cmp	r0, #0
 8003b48:	d038      	beq.n	8003bbc <_svfiprintf_r+0x1c8>
 8003b4a:	4b24      	ldr	r3, [pc, #144]	; (8003bdc <_svfiprintf_r+0x1e8>)
 8003b4c:	bb13      	cbnz	r3, 8003b94 <_svfiprintf_r+0x1a0>
 8003b4e:	9b03      	ldr	r3, [sp, #12]
 8003b50:	3307      	adds	r3, #7
 8003b52:	f023 0307 	bic.w	r3, r3, #7
 8003b56:	3308      	adds	r3, #8
 8003b58:	9303      	str	r3, [sp, #12]
 8003b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b5c:	444b      	add	r3, r9
 8003b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b60:	e76d      	b.n	8003a3e <_svfiprintf_r+0x4a>
 8003b62:	fb05 3202 	mla	r2, r5, r2, r3
 8003b66:	2001      	movs	r0, #1
 8003b68:	460f      	mov	r7, r1
 8003b6a:	e7a6      	b.n	8003aba <_svfiprintf_r+0xc6>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	3701      	adds	r7, #1
 8003b70:	9305      	str	r3, [sp, #20]
 8003b72:	4619      	mov	r1, r3
 8003b74:	250a      	movs	r5, #10
 8003b76:	4638      	mov	r0, r7
 8003b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b7c:	3a30      	subs	r2, #48	; 0x30
 8003b7e:	2a09      	cmp	r2, #9
 8003b80:	d903      	bls.n	8003b8a <_svfiprintf_r+0x196>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0c8      	beq.n	8003b18 <_svfiprintf_r+0x124>
 8003b86:	9105      	str	r1, [sp, #20]
 8003b88:	e7c6      	b.n	8003b18 <_svfiprintf_r+0x124>
 8003b8a:	fb05 2101 	mla	r1, r5, r1, r2
 8003b8e:	2301      	movs	r3, #1
 8003b90:	4607      	mov	r7, r0
 8003b92:	e7f0      	b.n	8003b76 <_svfiprintf_r+0x182>
 8003b94:	ab03      	add	r3, sp, #12
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	4622      	mov	r2, r4
 8003b9a:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <_svfiprintf_r+0x1ec>)
 8003b9c:	a904      	add	r1, sp, #16
 8003b9e:	4640      	mov	r0, r8
 8003ba0:	f3af 8000 	nop.w
 8003ba4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003ba8:	4681      	mov	r9, r0
 8003baa:	d1d6      	bne.n	8003b5a <_svfiprintf_r+0x166>
 8003bac:	89a3      	ldrh	r3, [r4, #12]
 8003bae:	065b      	lsls	r3, r3, #25
 8003bb0:	f53f af35 	bmi.w	8003a1e <_svfiprintf_r+0x2a>
 8003bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bb6:	b01d      	add	sp, #116	; 0x74
 8003bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bbc:	ab03      	add	r3, sp, #12
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <_svfiprintf_r+0x1ec>)
 8003bc4:	a904      	add	r1, sp, #16
 8003bc6:	4640      	mov	r0, r8
 8003bc8:	f000 f882 	bl	8003cd0 <_printf_i>
 8003bcc:	e7ea      	b.n	8003ba4 <_svfiprintf_r+0x1b0>
 8003bce:	bf00      	nop
 8003bd0:	0800413c 	.word	0x0800413c
 8003bd4:	08004142 	.word	0x08004142
 8003bd8:	08004146 	.word	0x08004146
 8003bdc:	00000000 	.word	0x00000000
 8003be0:	08003941 	.word	0x08003941

08003be4 <_printf_common>:
 8003be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be8:	4691      	mov	r9, r2
 8003bea:	461f      	mov	r7, r3
 8003bec:	688a      	ldr	r2, [r1, #8]
 8003bee:	690b      	ldr	r3, [r1, #16]
 8003bf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	bfb8      	it	lt
 8003bf8:	4613      	movlt	r3, r2
 8003bfa:	f8c9 3000 	str.w	r3, [r9]
 8003bfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c02:	4606      	mov	r6, r0
 8003c04:	460c      	mov	r4, r1
 8003c06:	b112      	cbz	r2, 8003c0e <_printf_common+0x2a>
 8003c08:	3301      	adds	r3, #1
 8003c0a:	f8c9 3000 	str.w	r3, [r9]
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	0699      	lsls	r1, r3, #26
 8003c12:	bf42      	ittt	mi
 8003c14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003c18:	3302      	addmi	r3, #2
 8003c1a:	f8c9 3000 	strmi.w	r3, [r9]
 8003c1e:	6825      	ldr	r5, [r4, #0]
 8003c20:	f015 0506 	ands.w	r5, r5, #6
 8003c24:	d107      	bne.n	8003c36 <_printf_common+0x52>
 8003c26:	f104 0a19 	add.w	sl, r4, #25
 8003c2a:	68e3      	ldr	r3, [r4, #12]
 8003c2c:	f8d9 2000 	ldr.w	r2, [r9]
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	42ab      	cmp	r3, r5
 8003c34:	dc28      	bgt.n	8003c88 <_printf_common+0xa4>
 8003c36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003c3a:	6822      	ldr	r2, [r4, #0]
 8003c3c:	3300      	adds	r3, #0
 8003c3e:	bf18      	it	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	0692      	lsls	r2, r2, #26
 8003c44:	d42d      	bmi.n	8003ca2 <_printf_common+0xbe>
 8003c46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c4a:	4639      	mov	r1, r7
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	47c0      	blx	r8
 8003c50:	3001      	adds	r0, #1
 8003c52:	d020      	beq.n	8003c96 <_printf_common+0xb2>
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	68e5      	ldr	r5, [r4, #12]
 8003c58:	f8d9 2000 	ldr.w	r2, [r9]
 8003c5c:	f003 0306 	and.w	r3, r3, #6
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	bf08      	it	eq
 8003c64:	1aad      	subeq	r5, r5, r2
 8003c66:	68a3      	ldr	r3, [r4, #8]
 8003c68:	6922      	ldr	r2, [r4, #16]
 8003c6a:	bf0c      	ite	eq
 8003c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c70:	2500      	movne	r5, #0
 8003c72:	4293      	cmp	r3, r2
 8003c74:	bfc4      	itt	gt
 8003c76:	1a9b      	subgt	r3, r3, r2
 8003c78:	18ed      	addgt	r5, r5, r3
 8003c7a:	f04f 0900 	mov.w	r9, #0
 8003c7e:	341a      	adds	r4, #26
 8003c80:	454d      	cmp	r5, r9
 8003c82:	d11a      	bne.n	8003cba <_printf_common+0xd6>
 8003c84:	2000      	movs	r0, #0
 8003c86:	e008      	b.n	8003c9a <_printf_common+0xb6>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	4652      	mov	r2, sl
 8003c8c:	4639      	mov	r1, r7
 8003c8e:	4630      	mov	r0, r6
 8003c90:	47c0      	blx	r8
 8003c92:	3001      	adds	r0, #1
 8003c94:	d103      	bne.n	8003c9e <_printf_common+0xba>
 8003c96:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c9e:	3501      	adds	r5, #1
 8003ca0:	e7c3      	b.n	8003c2a <_printf_common+0x46>
 8003ca2:	18e1      	adds	r1, r4, r3
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	2030      	movs	r0, #48	; 0x30
 8003ca8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cac:	4422      	add	r2, r4
 8003cae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cb6:	3302      	adds	r3, #2
 8003cb8:	e7c5      	b.n	8003c46 <_printf_common+0x62>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	4622      	mov	r2, r4
 8003cbe:	4639      	mov	r1, r7
 8003cc0:	4630      	mov	r0, r6
 8003cc2:	47c0      	blx	r8
 8003cc4:	3001      	adds	r0, #1
 8003cc6:	d0e6      	beq.n	8003c96 <_printf_common+0xb2>
 8003cc8:	f109 0901 	add.w	r9, r9, #1
 8003ccc:	e7d8      	b.n	8003c80 <_printf_common+0x9c>
	...

08003cd0 <_printf_i>:
 8003cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003cd8:	460c      	mov	r4, r1
 8003cda:	7e09      	ldrb	r1, [r1, #24]
 8003cdc:	b085      	sub	sp, #20
 8003cde:	296e      	cmp	r1, #110	; 0x6e
 8003ce0:	4617      	mov	r7, r2
 8003ce2:	4606      	mov	r6, r0
 8003ce4:	4698      	mov	r8, r3
 8003ce6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ce8:	f000 80b3 	beq.w	8003e52 <_printf_i+0x182>
 8003cec:	d822      	bhi.n	8003d34 <_printf_i+0x64>
 8003cee:	2963      	cmp	r1, #99	; 0x63
 8003cf0:	d036      	beq.n	8003d60 <_printf_i+0x90>
 8003cf2:	d80a      	bhi.n	8003d0a <_printf_i+0x3a>
 8003cf4:	2900      	cmp	r1, #0
 8003cf6:	f000 80b9 	beq.w	8003e6c <_printf_i+0x19c>
 8003cfa:	2958      	cmp	r1, #88	; 0x58
 8003cfc:	f000 8083 	beq.w	8003e06 <_printf_i+0x136>
 8003d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003d08:	e032      	b.n	8003d70 <_printf_i+0xa0>
 8003d0a:	2964      	cmp	r1, #100	; 0x64
 8003d0c:	d001      	beq.n	8003d12 <_printf_i+0x42>
 8003d0e:	2969      	cmp	r1, #105	; 0x69
 8003d10:	d1f6      	bne.n	8003d00 <_printf_i+0x30>
 8003d12:	6820      	ldr	r0, [r4, #0]
 8003d14:	6813      	ldr	r3, [r2, #0]
 8003d16:	0605      	lsls	r5, r0, #24
 8003d18:	f103 0104 	add.w	r1, r3, #4
 8003d1c:	d52a      	bpl.n	8003d74 <_printf_i+0xa4>
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6011      	str	r1, [r2, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	da03      	bge.n	8003d2e <_printf_i+0x5e>
 8003d26:	222d      	movs	r2, #45	; 0x2d
 8003d28:	425b      	negs	r3, r3
 8003d2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003d2e:	486f      	ldr	r0, [pc, #444]	; (8003eec <_printf_i+0x21c>)
 8003d30:	220a      	movs	r2, #10
 8003d32:	e039      	b.n	8003da8 <_printf_i+0xd8>
 8003d34:	2973      	cmp	r1, #115	; 0x73
 8003d36:	f000 809d 	beq.w	8003e74 <_printf_i+0x1a4>
 8003d3a:	d808      	bhi.n	8003d4e <_printf_i+0x7e>
 8003d3c:	296f      	cmp	r1, #111	; 0x6f
 8003d3e:	d020      	beq.n	8003d82 <_printf_i+0xb2>
 8003d40:	2970      	cmp	r1, #112	; 0x70
 8003d42:	d1dd      	bne.n	8003d00 <_printf_i+0x30>
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	f043 0320 	orr.w	r3, r3, #32
 8003d4a:	6023      	str	r3, [r4, #0]
 8003d4c:	e003      	b.n	8003d56 <_printf_i+0x86>
 8003d4e:	2975      	cmp	r1, #117	; 0x75
 8003d50:	d017      	beq.n	8003d82 <_printf_i+0xb2>
 8003d52:	2978      	cmp	r1, #120	; 0x78
 8003d54:	d1d4      	bne.n	8003d00 <_printf_i+0x30>
 8003d56:	2378      	movs	r3, #120	; 0x78
 8003d58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d5c:	4864      	ldr	r0, [pc, #400]	; (8003ef0 <_printf_i+0x220>)
 8003d5e:	e055      	b.n	8003e0c <_printf_i+0x13c>
 8003d60:	6813      	ldr	r3, [r2, #0]
 8003d62:	1d19      	adds	r1, r3, #4
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6011      	str	r1, [r2, #0]
 8003d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d70:	2301      	movs	r3, #1
 8003d72:	e08c      	b.n	8003e8e <_printf_i+0x1be>
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6011      	str	r1, [r2, #0]
 8003d78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d7c:	bf18      	it	ne
 8003d7e:	b21b      	sxthne	r3, r3
 8003d80:	e7cf      	b.n	8003d22 <_printf_i+0x52>
 8003d82:	6813      	ldr	r3, [r2, #0]
 8003d84:	6825      	ldr	r5, [r4, #0]
 8003d86:	1d18      	adds	r0, r3, #4
 8003d88:	6010      	str	r0, [r2, #0]
 8003d8a:	0628      	lsls	r0, r5, #24
 8003d8c:	d501      	bpl.n	8003d92 <_printf_i+0xc2>
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	e002      	b.n	8003d98 <_printf_i+0xc8>
 8003d92:	0668      	lsls	r0, r5, #25
 8003d94:	d5fb      	bpl.n	8003d8e <_printf_i+0xbe>
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	4854      	ldr	r0, [pc, #336]	; (8003eec <_printf_i+0x21c>)
 8003d9a:	296f      	cmp	r1, #111	; 0x6f
 8003d9c:	bf14      	ite	ne
 8003d9e:	220a      	movne	r2, #10
 8003da0:	2208      	moveq	r2, #8
 8003da2:	2100      	movs	r1, #0
 8003da4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003da8:	6865      	ldr	r5, [r4, #4]
 8003daa:	60a5      	str	r5, [r4, #8]
 8003dac:	2d00      	cmp	r5, #0
 8003dae:	f2c0 8095 	blt.w	8003edc <_printf_i+0x20c>
 8003db2:	6821      	ldr	r1, [r4, #0]
 8003db4:	f021 0104 	bic.w	r1, r1, #4
 8003db8:	6021      	str	r1, [r4, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d13d      	bne.n	8003e3a <_printf_i+0x16a>
 8003dbe:	2d00      	cmp	r5, #0
 8003dc0:	f040 808e 	bne.w	8003ee0 <_printf_i+0x210>
 8003dc4:	4665      	mov	r5, ip
 8003dc6:	2a08      	cmp	r2, #8
 8003dc8:	d10b      	bne.n	8003de2 <_printf_i+0x112>
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	07db      	lsls	r3, r3, #31
 8003dce:	d508      	bpl.n	8003de2 <_printf_i+0x112>
 8003dd0:	6923      	ldr	r3, [r4, #16]
 8003dd2:	6862      	ldr	r2, [r4, #4]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	bfde      	ittt	le
 8003dd8:	2330      	movle	r3, #48	; 0x30
 8003dda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003dde:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003de2:	ebac 0305 	sub.w	r3, ip, r5
 8003de6:	6123      	str	r3, [r4, #16]
 8003de8:	f8cd 8000 	str.w	r8, [sp]
 8003dec:	463b      	mov	r3, r7
 8003dee:	aa03      	add	r2, sp, #12
 8003df0:	4621      	mov	r1, r4
 8003df2:	4630      	mov	r0, r6
 8003df4:	f7ff fef6 	bl	8003be4 <_printf_common>
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d14d      	bne.n	8003e98 <_printf_i+0x1c8>
 8003dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003e00:	b005      	add	sp, #20
 8003e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e06:	4839      	ldr	r0, [pc, #228]	; (8003eec <_printf_i+0x21c>)
 8003e08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003e0c:	6813      	ldr	r3, [r2, #0]
 8003e0e:	6821      	ldr	r1, [r4, #0]
 8003e10:	1d1d      	adds	r5, r3, #4
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6015      	str	r5, [r2, #0]
 8003e16:	060a      	lsls	r2, r1, #24
 8003e18:	d50b      	bpl.n	8003e32 <_printf_i+0x162>
 8003e1a:	07ca      	lsls	r2, r1, #31
 8003e1c:	bf44      	itt	mi
 8003e1e:	f041 0120 	orrmi.w	r1, r1, #32
 8003e22:	6021      	strmi	r1, [r4, #0]
 8003e24:	b91b      	cbnz	r3, 8003e2e <_printf_i+0x15e>
 8003e26:	6822      	ldr	r2, [r4, #0]
 8003e28:	f022 0220 	bic.w	r2, r2, #32
 8003e2c:	6022      	str	r2, [r4, #0]
 8003e2e:	2210      	movs	r2, #16
 8003e30:	e7b7      	b.n	8003da2 <_printf_i+0xd2>
 8003e32:	064d      	lsls	r5, r1, #25
 8003e34:	bf48      	it	mi
 8003e36:	b29b      	uxthmi	r3, r3
 8003e38:	e7ef      	b.n	8003e1a <_printf_i+0x14a>
 8003e3a:	4665      	mov	r5, ip
 8003e3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e40:	fb02 3311 	mls	r3, r2, r1, r3
 8003e44:	5cc3      	ldrb	r3, [r0, r3]
 8003e46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	2900      	cmp	r1, #0
 8003e4e:	d1f5      	bne.n	8003e3c <_printf_i+0x16c>
 8003e50:	e7b9      	b.n	8003dc6 <_printf_i+0xf6>
 8003e52:	6813      	ldr	r3, [r2, #0]
 8003e54:	6825      	ldr	r5, [r4, #0]
 8003e56:	6961      	ldr	r1, [r4, #20]
 8003e58:	1d18      	adds	r0, r3, #4
 8003e5a:	6010      	str	r0, [r2, #0]
 8003e5c:	0628      	lsls	r0, r5, #24
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	d501      	bpl.n	8003e66 <_printf_i+0x196>
 8003e62:	6019      	str	r1, [r3, #0]
 8003e64:	e002      	b.n	8003e6c <_printf_i+0x19c>
 8003e66:	066a      	lsls	r2, r5, #25
 8003e68:	d5fb      	bpl.n	8003e62 <_printf_i+0x192>
 8003e6a:	8019      	strh	r1, [r3, #0]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	6123      	str	r3, [r4, #16]
 8003e70:	4665      	mov	r5, ip
 8003e72:	e7b9      	b.n	8003de8 <_printf_i+0x118>
 8003e74:	6813      	ldr	r3, [r2, #0]
 8003e76:	1d19      	adds	r1, r3, #4
 8003e78:	6011      	str	r1, [r2, #0]
 8003e7a:	681d      	ldr	r5, [r3, #0]
 8003e7c:	6862      	ldr	r2, [r4, #4]
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4628      	mov	r0, r5
 8003e82:	f7fc f9cd 	bl	8000220 <memchr>
 8003e86:	b108      	cbz	r0, 8003e8c <_printf_i+0x1bc>
 8003e88:	1b40      	subs	r0, r0, r5
 8003e8a:	6060      	str	r0, [r4, #4]
 8003e8c:	6863      	ldr	r3, [r4, #4]
 8003e8e:	6123      	str	r3, [r4, #16]
 8003e90:	2300      	movs	r3, #0
 8003e92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e96:	e7a7      	b.n	8003de8 <_printf_i+0x118>
 8003e98:	6923      	ldr	r3, [r4, #16]
 8003e9a:	462a      	mov	r2, r5
 8003e9c:	4639      	mov	r1, r7
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	47c0      	blx	r8
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	d0aa      	beq.n	8003dfc <_printf_i+0x12c>
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	079b      	lsls	r3, r3, #30
 8003eaa:	d413      	bmi.n	8003ed4 <_printf_i+0x204>
 8003eac:	68e0      	ldr	r0, [r4, #12]
 8003eae:	9b03      	ldr	r3, [sp, #12]
 8003eb0:	4298      	cmp	r0, r3
 8003eb2:	bfb8      	it	lt
 8003eb4:	4618      	movlt	r0, r3
 8003eb6:	e7a3      	b.n	8003e00 <_printf_i+0x130>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	464a      	mov	r2, r9
 8003ebc:	4639      	mov	r1, r7
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	47c0      	blx	r8
 8003ec2:	3001      	adds	r0, #1
 8003ec4:	d09a      	beq.n	8003dfc <_printf_i+0x12c>
 8003ec6:	3501      	adds	r5, #1
 8003ec8:	68e3      	ldr	r3, [r4, #12]
 8003eca:	9a03      	ldr	r2, [sp, #12]
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	42ab      	cmp	r3, r5
 8003ed0:	dcf2      	bgt.n	8003eb8 <_printf_i+0x1e8>
 8003ed2:	e7eb      	b.n	8003eac <_printf_i+0x1dc>
 8003ed4:	2500      	movs	r5, #0
 8003ed6:	f104 0919 	add.w	r9, r4, #25
 8003eda:	e7f5      	b.n	8003ec8 <_printf_i+0x1f8>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1ac      	bne.n	8003e3a <_printf_i+0x16a>
 8003ee0:	7803      	ldrb	r3, [r0, #0]
 8003ee2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ee6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eea:	e76c      	b.n	8003dc6 <_printf_i+0xf6>
 8003eec:	0800414d 	.word	0x0800414d
 8003ef0:	0800415e 	.word	0x0800415e

08003ef4 <memmove>:
 8003ef4:	4288      	cmp	r0, r1
 8003ef6:	b510      	push	{r4, lr}
 8003ef8:	eb01 0302 	add.w	r3, r1, r2
 8003efc:	d807      	bhi.n	8003f0e <memmove+0x1a>
 8003efe:	1e42      	subs	r2, r0, #1
 8003f00:	4299      	cmp	r1, r3
 8003f02:	d00a      	beq.n	8003f1a <memmove+0x26>
 8003f04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f08:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003f0c:	e7f8      	b.n	8003f00 <memmove+0xc>
 8003f0e:	4283      	cmp	r3, r0
 8003f10:	d9f5      	bls.n	8003efe <memmove+0xa>
 8003f12:	1881      	adds	r1, r0, r2
 8003f14:	1ad2      	subs	r2, r2, r3
 8003f16:	42d3      	cmn	r3, r2
 8003f18:	d100      	bne.n	8003f1c <memmove+0x28>
 8003f1a:	bd10      	pop	{r4, pc}
 8003f1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f20:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003f24:	e7f7      	b.n	8003f16 <memmove+0x22>
	...

08003f28 <_free_r>:
 8003f28:	b538      	push	{r3, r4, r5, lr}
 8003f2a:	4605      	mov	r5, r0
 8003f2c:	2900      	cmp	r1, #0
 8003f2e:	d045      	beq.n	8003fbc <_free_r+0x94>
 8003f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f34:	1f0c      	subs	r4, r1, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bfb8      	it	lt
 8003f3a:	18e4      	addlt	r4, r4, r3
 8003f3c:	f000 f8d2 	bl	80040e4 <__malloc_lock>
 8003f40:	4a1f      	ldr	r2, [pc, #124]	; (8003fc0 <_free_r+0x98>)
 8003f42:	6813      	ldr	r3, [r2, #0]
 8003f44:	4610      	mov	r0, r2
 8003f46:	b933      	cbnz	r3, 8003f56 <_free_r+0x2e>
 8003f48:	6063      	str	r3, [r4, #4]
 8003f4a:	6014      	str	r4, [r2, #0]
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f52:	f000 b8c8 	b.w	80040e6 <__malloc_unlock>
 8003f56:	42a3      	cmp	r3, r4
 8003f58:	d90c      	bls.n	8003f74 <_free_r+0x4c>
 8003f5a:	6821      	ldr	r1, [r4, #0]
 8003f5c:	1862      	adds	r2, r4, r1
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	bf04      	itt	eq
 8003f62:	681a      	ldreq	r2, [r3, #0]
 8003f64:	685b      	ldreq	r3, [r3, #4]
 8003f66:	6063      	str	r3, [r4, #4]
 8003f68:	bf04      	itt	eq
 8003f6a:	1852      	addeq	r2, r2, r1
 8003f6c:	6022      	streq	r2, [r4, #0]
 8003f6e:	6004      	str	r4, [r0, #0]
 8003f70:	e7ec      	b.n	8003f4c <_free_r+0x24>
 8003f72:	4613      	mov	r3, r2
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	b10a      	cbz	r2, 8003f7c <_free_r+0x54>
 8003f78:	42a2      	cmp	r2, r4
 8003f7a:	d9fa      	bls.n	8003f72 <_free_r+0x4a>
 8003f7c:	6819      	ldr	r1, [r3, #0]
 8003f7e:	1858      	adds	r0, r3, r1
 8003f80:	42a0      	cmp	r0, r4
 8003f82:	d10b      	bne.n	8003f9c <_free_r+0x74>
 8003f84:	6820      	ldr	r0, [r4, #0]
 8003f86:	4401      	add	r1, r0
 8003f88:	1858      	adds	r0, r3, r1
 8003f8a:	4282      	cmp	r2, r0
 8003f8c:	6019      	str	r1, [r3, #0]
 8003f8e:	d1dd      	bne.n	8003f4c <_free_r+0x24>
 8003f90:	6810      	ldr	r0, [r2, #0]
 8003f92:	6852      	ldr	r2, [r2, #4]
 8003f94:	605a      	str	r2, [r3, #4]
 8003f96:	4401      	add	r1, r0
 8003f98:	6019      	str	r1, [r3, #0]
 8003f9a:	e7d7      	b.n	8003f4c <_free_r+0x24>
 8003f9c:	d902      	bls.n	8003fa4 <_free_r+0x7c>
 8003f9e:	230c      	movs	r3, #12
 8003fa0:	602b      	str	r3, [r5, #0]
 8003fa2:	e7d3      	b.n	8003f4c <_free_r+0x24>
 8003fa4:	6820      	ldr	r0, [r4, #0]
 8003fa6:	1821      	adds	r1, r4, r0
 8003fa8:	428a      	cmp	r2, r1
 8003faa:	bf04      	itt	eq
 8003fac:	6811      	ldreq	r1, [r2, #0]
 8003fae:	6852      	ldreq	r2, [r2, #4]
 8003fb0:	6062      	str	r2, [r4, #4]
 8003fb2:	bf04      	itt	eq
 8003fb4:	1809      	addeq	r1, r1, r0
 8003fb6:	6021      	streq	r1, [r4, #0]
 8003fb8:	605c      	str	r4, [r3, #4]
 8003fba:	e7c7      	b.n	8003f4c <_free_r+0x24>
 8003fbc:	bd38      	pop	{r3, r4, r5, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000090 	.word	0x20000090

08003fc4 <_malloc_r>:
 8003fc4:	b570      	push	{r4, r5, r6, lr}
 8003fc6:	1ccd      	adds	r5, r1, #3
 8003fc8:	f025 0503 	bic.w	r5, r5, #3
 8003fcc:	3508      	adds	r5, #8
 8003fce:	2d0c      	cmp	r5, #12
 8003fd0:	bf38      	it	cc
 8003fd2:	250c      	movcc	r5, #12
 8003fd4:	2d00      	cmp	r5, #0
 8003fd6:	4606      	mov	r6, r0
 8003fd8:	db01      	blt.n	8003fde <_malloc_r+0x1a>
 8003fda:	42a9      	cmp	r1, r5
 8003fdc:	d903      	bls.n	8003fe6 <_malloc_r+0x22>
 8003fde:	230c      	movs	r3, #12
 8003fe0:	6033      	str	r3, [r6, #0]
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	bd70      	pop	{r4, r5, r6, pc}
 8003fe6:	f000 f87d 	bl	80040e4 <__malloc_lock>
 8003fea:	4a21      	ldr	r2, [pc, #132]	; (8004070 <_malloc_r+0xac>)
 8003fec:	6814      	ldr	r4, [r2, #0]
 8003fee:	4621      	mov	r1, r4
 8003ff0:	b991      	cbnz	r1, 8004018 <_malloc_r+0x54>
 8003ff2:	4c20      	ldr	r4, [pc, #128]	; (8004074 <_malloc_r+0xb0>)
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	b91b      	cbnz	r3, 8004000 <_malloc_r+0x3c>
 8003ff8:	4630      	mov	r0, r6
 8003ffa:	f000 f863 	bl	80040c4 <_sbrk_r>
 8003ffe:	6020      	str	r0, [r4, #0]
 8004000:	4629      	mov	r1, r5
 8004002:	4630      	mov	r0, r6
 8004004:	f000 f85e 	bl	80040c4 <_sbrk_r>
 8004008:	1c43      	adds	r3, r0, #1
 800400a:	d124      	bne.n	8004056 <_malloc_r+0x92>
 800400c:	230c      	movs	r3, #12
 800400e:	6033      	str	r3, [r6, #0]
 8004010:	4630      	mov	r0, r6
 8004012:	f000 f868 	bl	80040e6 <__malloc_unlock>
 8004016:	e7e4      	b.n	8003fe2 <_malloc_r+0x1e>
 8004018:	680b      	ldr	r3, [r1, #0]
 800401a:	1b5b      	subs	r3, r3, r5
 800401c:	d418      	bmi.n	8004050 <_malloc_r+0x8c>
 800401e:	2b0b      	cmp	r3, #11
 8004020:	d90f      	bls.n	8004042 <_malloc_r+0x7e>
 8004022:	600b      	str	r3, [r1, #0]
 8004024:	50cd      	str	r5, [r1, r3]
 8004026:	18cc      	adds	r4, r1, r3
 8004028:	4630      	mov	r0, r6
 800402a:	f000 f85c 	bl	80040e6 <__malloc_unlock>
 800402e:	f104 000b 	add.w	r0, r4, #11
 8004032:	1d23      	adds	r3, r4, #4
 8004034:	f020 0007 	bic.w	r0, r0, #7
 8004038:	1ac3      	subs	r3, r0, r3
 800403a:	d0d3      	beq.n	8003fe4 <_malloc_r+0x20>
 800403c:	425a      	negs	r2, r3
 800403e:	50e2      	str	r2, [r4, r3]
 8004040:	e7d0      	b.n	8003fe4 <_malloc_r+0x20>
 8004042:	428c      	cmp	r4, r1
 8004044:	684b      	ldr	r3, [r1, #4]
 8004046:	bf16      	itet	ne
 8004048:	6063      	strne	r3, [r4, #4]
 800404a:	6013      	streq	r3, [r2, #0]
 800404c:	460c      	movne	r4, r1
 800404e:	e7eb      	b.n	8004028 <_malloc_r+0x64>
 8004050:	460c      	mov	r4, r1
 8004052:	6849      	ldr	r1, [r1, #4]
 8004054:	e7cc      	b.n	8003ff0 <_malloc_r+0x2c>
 8004056:	1cc4      	adds	r4, r0, #3
 8004058:	f024 0403 	bic.w	r4, r4, #3
 800405c:	42a0      	cmp	r0, r4
 800405e:	d005      	beq.n	800406c <_malloc_r+0xa8>
 8004060:	1a21      	subs	r1, r4, r0
 8004062:	4630      	mov	r0, r6
 8004064:	f000 f82e 	bl	80040c4 <_sbrk_r>
 8004068:	3001      	adds	r0, #1
 800406a:	d0cf      	beq.n	800400c <_malloc_r+0x48>
 800406c:	6025      	str	r5, [r4, #0]
 800406e:	e7db      	b.n	8004028 <_malloc_r+0x64>
 8004070:	20000090 	.word	0x20000090
 8004074:	20000094 	.word	0x20000094

08004078 <_realloc_r>:
 8004078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407a:	4607      	mov	r7, r0
 800407c:	4614      	mov	r4, r2
 800407e:	460e      	mov	r6, r1
 8004080:	b921      	cbnz	r1, 800408c <_realloc_r+0x14>
 8004082:	4611      	mov	r1, r2
 8004084:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004088:	f7ff bf9c 	b.w	8003fc4 <_malloc_r>
 800408c:	b922      	cbnz	r2, 8004098 <_realloc_r+0x20>
 800408e:	f7ff ff4b 	bl	8003f28 <_free_r>
 8004092:	4625      	mov	r5, r4
 8004094:	4628      	mov	r0, r5
 8004096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004098:	f000 f826 	bl	80040e8 <_malloc_usable_size_r>
 800409c:	42a0      	cmp	r0, r4
 800409e:	d20f      	bcs.n	80040c0 <_realloc_r+0x48>
 80040a0:	4621      	mov	r1, r4
 80040a2:	4638      	mov	r0, r7
 80040a4:	f7ff ff8e 	bl	8003fc4 <_malloc_r>
 80040a8:	4605      	mov	r5, r0
 80040aa:	2800      	cmp	r0, #0
 80040ac:	d0f2      	beq.n	8004094 <_realloc_r+0x1c>
 80040ae:	4631      	mov	r1, r6
 80040b0:	4622      	mov	r2, r4
 80040b2:	f7ff fc11 	bl	80038d8 <memcpy>
 80040b6:	4631      	mov	r1, r6
 80040b8:	4638      	mov	r0, r7
 80040ba:	f7ff ff35 	bl	8003f28 <_free_r>
 80040be:	e7e9      	b.n	8004094 <_realloc_r+0x1c>
 80040c0:	4635      	mov	r5, r6
 80040c2:	e7e7      	b.n	8004094 <_realloc_r+0x1c>

080040c4 <_sbrk_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	4c06      	ldr	r4, [pc, #24]	; (80040e0 <_sbrk_r+0x1c>)
 80040c8:	2300      	movs	r3, #0
 80040ca:	4605      	mov	r5, r0
 80040cc:	4608      	mov	r0, r1
 80040ce:	6023      	str	r3, [r4, #0]
 80040d0:	f7ff fb6c 	bl	80037ac <_sbrk>
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	d102      	bne.n	80040de <_sbrk_r+0x1a>
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	b103      	cbz	r3, 80040de <_sbrk_r+0x1a>
 80040dc:	602b      	str	r3, [r5, #0]
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	20000170 	.word	0x20000170

080040e4 <__malloc_lock>:
 80040e4:	4770      	bx	lr

080040e6 <__malloc_unlock>:
 80040e6:	4770      	bx	lr

080040e8 <_malloc_usable_size_r>:
 80040e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ec:	1f18      	subs	r0, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bfbc      	itt	lt
 80040f2:	580b      	ldrlt	r3, [r1, r0]
 80040f4:	18c0      	addlt	r0, r0, r3
 80040f6:	4770      	bx	lr

080040f8 <_init>:
 80040f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fa:	bf00      	nop
 80040fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fe:	bc08      	pop	{r3}
 8004100:	469e      	mov	lr, r3
 8004102:	4770      	bx	lr

08004104 <_fini>:
 8004104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004106:	bf00      	nop
 8004108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410a:	bc08      	pop	{r3}
 800410c:	469e      	mov	lr, r3
 800410e:	4770      	bx	lr
